"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[8726],{968:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>d,default:()=>h,frontMatter:()=>l,metadata:()=>r,toc:()=>u});const r=JSON.parse('{"id":"react-app/index","title":"Building a React Dashboard","description":"In this comprehensive workshop, we\'ll build a professional analytics dashboard for TPC-H data from the ground up. You\'ll learn how to create a modern React application that connects to Cube\'s semantic layer, implements secure authentication, and displays interactive charts with role-based access control.","source":"@site/docs/react-app/index.md","sourceDirName":"react-app","slug":"/react-app/","permalink":"/cube-workshop/docs/react-app/","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{},"sidebar":"workshopSidebar","previous":{"title":"APIs: Multiple Ways to Access Data","permalink":"/cube-workshop/docs/apis/"},"next":{"title":"D3 Agentic Analytics","permalink":"/cube-workshop/docs/d3-analytics/"}}');var a=t(4848),s=t(8453),o=t(1470),i=t(9365);const l={},d="Building a React Dashboard",c={},u=[{value:"Workshop Overview",id:"workshop-overview",level:2},{value:"What We&#39;ll Build",id:"what-well-build",level:3},{value:"Prerequisites",id:"prerequisites",level:2},{value:"Part 1: Project Setup &amp; Authentication",id:"part-1-project-setup--authentication",level:2},{value:"Step 1: Create React App with Dependencies",id:"step-1-create-react-app-with-dependencies",level:3},{value:"Step 2: Set Up Express Authentication Server",id:"step-2-set-up-express-authentication-server",level:3},{value:"Step 3: Create Environment Configuration",id:"step-3-create-environment-configuration",level:3},{value:"Step 4: Create Authentication Context",id:"step-4-create-authentication-context",level:3},{value:"Step 5: Create Login Form Component",id:"step-5-create-login-form-component",level:3},{value:"Step 6: Create Basic App Structure",id:"step-6-create-basic-app-structure",level:3},{value:"Step 7: Update Package Scripts",id:"step-7-update-package-scripts",level:3},{value:"Step 8: Test Authentication",id:"step-8-test-authentication",level:3},{value:"Part 2: API Layer &amp; Types",id:"part-2-api-layer--types",level:2},{value:"Step 1: Create TypeScript Interfaces",id:"step-1-create-typescript-interfaces",level:3},{value:"Step 2: Create Cube API Service",id:"step-2-create-cube-api-service",level:3},{value:"Step 3: Update AuthContext for Cube Integration",id:"step-3-update-authcontext-for-cube-integration",level:3},{value:"Part 3: App Layout &amp; Header",id:"part-3-app-layout--header",level:2},{value:"Step 1: Create Header Component",id:"step-1-create-header-component",level:3},{value:"Step 2: Create Main Dashboard Layout",id:"step-2-create-main-dashboard-layout",level:3},{value:"Step 3: Update App.tsx with Header and Dashboard",id:"step-3-update-apptsx-with-header-and-dashboard",level:3},{value:"Part 4: Global Filters",id:"part-4-global-filters",level:2},{value:"Step 1: Add API Methods for Filter Data",id:"step-1-add-api-methods-for-filter-data",level:3},{value:"Step 2: Create Filter Bar Component",id:"step-2-create-filter-bar-component",level:3},{value:"Step 3: Update Dashboard to Include Filters",id:"step-3-update-dashboard-to-include-filters",level:3},{value:"Part 5: Dashboard Structure &amp; KPI Cards",id:"part-5-dashboard-structure--kpi-cards",level:2},{value:"Step 1: Create KPI Cards Component",id:"step-1-create-kpi-cards-component",level:3},{value:"Step 2: Add Tabs to Dashboard",id:"step-2-add-tabs-to-dashboard",level:3},{value:"Step 3: Test the Enhanced Dashboard",id:"step-3-test-the-enhanced-dashboard",level:3},{value:"Part 6: Chart Components",id:"part-6-chart-components",level:2},{value:"Step 1: Add More API Methods",id:"step-1-add-more-api-methods",level:3},{value:"Step 2: Create Reusable Chart Components",id:"step-2-create-reusable-chart-components",level:3},{value:"Step 3: Create Region Chart Component (Doughnut)",id:"step-3-create-region-chart-component-doughnut",level:3},{value:"Step 4: Update Dashboard with Real Charts",id:"step-4-update-dashboard-with-real-charts",level:3},{value:"Part 7: Complete Dashboard Views",id:"part-7-complete-dashboard-views",level:2},{value:"Step 1: Add Remaining API Methods",id:"step-1-add-remaining-api-methods",level:3},{value:"Step 2: Create Complete Dashboard with All Three Tabs",id:"step-2-create-complete-dashboard-with-all-three-tabs",level:3},{value:"Part 8: Polish &amp; Optimization",id:"part-8-polish--optimization",level:2},{value:"Step 1: Create MetricsCard Component for Better KPIs",id:"step-1-create-metricscard-component-for-better-kpis",level:3},{value:"Step 2: Update KPICards to Use MetricsCard",id:"step-2-update-kpicards-to-use-metricscard",level:3},{value:"Step 3: Add Error Boundaries and Better Error Handling",id:"step-3-add-error-boundaries-and-better-error-handling",level:3},{value:"Step 4: Final App.tsx Polish",id:"step-4-final-apptsx-polish",level:3},{value:"Step 5: Real-world Performance Exercise",id:"step-5-real-world-performance-exercise",level:3},{value:"The Performance Challenge",id:"the-performance-challenge",level:4},{value:"See the Problem in Action",id:"see-the-problem-in-action",level:4},{value:"Fix the Performance Issue",id:"fix-the-performance-issue",level:4},{value:"What We Learned",id:"what-we-learned",level:4},{value:"Recap! \ud83c\udf89",id:"recap-",level:2},{value:"<strong>React Development Skills</strong>",id:"react-development-skills",level:3},{value:"<strong>Cube Integration Excellence</strong>",id:"cube-integration-excellence",level:3},{value:"<strong>Authentication &amp; Security</strong>",id:"authentication--security",level:3},{value:"<strong>Professional Features</strong>",id:"professional-features",level:3},{value:"Final Project Structure",id:"final-project-structure",level:3},{value:"Next Steps",id:"next-steps",level:2}];function p(e){const n={a:"a",admonition:"admonition",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",hr:"hr",img:"img",li:"li",mdxAdmonitionTitle:"mdxAdmonitionTitle",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,s.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(n.header,{children:(0,a.jsx)(n.h1,{id:"building-a-react-dashboard",children:"Building a React Dashboard"})}),"\n",(0,a.jsx)(n.p,{children:"In this comprehensive workshop, we'll build a professional analytics dashboard for TPC-H data from the ground up. You'll learn how to create a modern React application that connects to Cube's semantic layer, implements secure authentication, and displays interactive charts with role-based access control."}),"\n",(0,a.jsx)(n.h2,{id:"workshop-overview",children:"Workshop Overview"}),"\n",(0,a.jsx)(n.p,{children:"This workshop is structured in 8 progressive parts, with each part building on the previous one. By the end, you'll have a production-ready dashboard that demonstrates all the key concepts of modern React development with Cube integration."}),"\n",(0,a.jsx)(n.h3,{id:"what-well-build",children:"What We'll Build"}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.img,{alt:"TPC-H Analytics Dashboard",src:t(7363).A+"",width:"3070",height:"1940"})}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.strong,{children:"Features you'll implement:"})}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:["\ud83d\udd10 ",(0,a.jsx)(n.strong,{children:"Server-side JWT authentication"})," with role-based access control"]}),"\n",(0,a.jsxs)(n.li,{children:["\ud83d\udcca ",(0,a.jsx)(n.strong,{children:"Interactive charts"})," showing revenue trends, customer segments, and regional performance"]}),"\n",(0,a.jsxs)(n.li,{children:["\ud83c\udfaf ",(0,a.jsx)(n.strong,{children:"Global filtering"})," that affects all dashboard components"]}),"\n",(0,a.jsxs)(n.li,{children:["\ud83d\udcf1 ",(0,a.jsx)(n.strong,{children:"Responsive design"})," using Material-UI components"]}),"\n",(0,a.jsxs)(n.li,{children:["\ud83d\ude80 ",(0,a.jsx)(n.strong,{children:"Sub-second performance"})," leveraging Cube's semantic layer"]}),"\n",(0,a.jsxs)(n.li,{children:["\ud83d\udd04 ",(0,a.jsx)(n.strong,{children:"Three dashboard views"})," with tabbed navigation"]}),"\n"]}),"\n",(0,a.jsx)(n.h2,{id:"prerequisites",children:"Prerequisites"}),"\n","\n",(0,a.jsx)(n.p,{children:"Before we begin, ensure you have:"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:"Node.js 20+ installed"}),"\n",(0,a.jsx)(n.li,{children:"Your Cube data model progress committed and merged to your Cube main branch"}),"\n",(0,a.jsx)(n.li,{children:"CLI Open - Terminal (for Mac) or Command Prompt (for Windows)"}),"\n",(0,a.jsx)(n.li,{children:"A code editor like VS Code (recommended but not required)"}),"\n"]}),"\n",(0,a.jsxs)(o.A,{groupId:"operating-systems",children:[(0,a.jsx)(i.A,{value:"mac",label:"macOS",children:(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"# Verify Node.js installation\nnode --version  # Should show v20.x or higher\n\n# Create a new directory for our project\nmkdir tpch-dashboard\ncd tpch-dashboard\n"})})}),(0,a.jsx)(i.A,{value:"windows",label:"Windows",children:(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-cmd",children:"# Verify Node.js installation\nnode --version  # Should show v20.x or higher\n\n# Create a new directory for our project\nmkdir tpch-dashboard\ncd tpch-dashboard\n"})})})]}),"\n",(0,a.jsx)(n.hr,{}),"\n",(0,a.jsx)(n.h2,{id:"part-1-project-setup--authentication",children:"Part 1: Project Setup & Authentication"}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.em,{children:"Goal: Get the basic app shell running with authentication"})}),"\n",(0,a.jsx)(n.h3,{id:"step-1-create-react-app-with-dependencies",children:"Step 1: Create React App with Dependencies"}),"\n",(0,a.jsx)(n.p,{children:"Let's start by creating a new React application with TypeScript and installing all the dependencies we'll need throughout the workshop."}),"\n",(0,a.jsxs)(o.A,{groupId:"operating-systems",children:[(0,a.jsx)(i.A,{value:"mac",label:"macOS",children:(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"# Create React app with TypeScript template\nnpx create-react-app . --template typescript\n\n# Install Material UI for professional components\nnpm install @mui/material@^5.14.20 @emotion/react @emotion/styled\nnpm install @mui/icons-material@^5.14.19\n\n# Install Chart.js for data visualization\nnpm install chart.js react-chartjs-2\n\n# Install axios for API calls\nnpm install axios\n\n# Install server dependencies for authentication\nnpm install --save-dev express cors jsonwebtoken dotenv concurrently\n"})})}),(0,a.jsx)(i.A,{value:"windows",label:"Windows",children:(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-cmd",children:"# Create React app with TypeScript template\nnpx create-react-app . --template typescript\n\n# Install Material UI for professional components\nnpm install @mui/material@^5.14.20 @emotion/react @emotion/styled\nnpm install @mui/icons-material@^5.14.19\n\n# Install Chart.js for data visualization\nnpm install chart.js react-chartjs-2\n\n# Install axios for API calls\nnpm install axios\n\n# Install server dependencies for authentication\nnpm install --save-dev express cors jsonwebtoken dotenv concurrently\n"})})})]}),"\n",(0,a.jsx)(n.h3,{id:"step-2-set-up-express-authentication-server",children:"Step 2: Set Up Express Authentication Server"}),"\n",(0,a.jsx)(n.p,{children:"Create a simple Express server that generates JWT tokens using your Cube API secret. This demonstrates server-side JWT generation for secure authentication."}),"\n",(0,a.jsxs)(n.p,{children:["Create a ",(0,a.jsx)(n.code,{children:"server.js"})," file in your project root:"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-javascript",metastring:'title="server.js"',children:"const express = require('express');\nconst jwt = require('jsonwebtoken');\nconst cors = require('cors');\nrequire('dotenv').config();\n\nconst app = express();\nconst PORT = process.env.SERVER_PORT || 3031;\n\n// Enable CORS for development\napp.use(cors());\napp.use(express.json());\n\n// Workshop users with different roles for access control demo\nconst WORKSHOP_USERS = [\n  {\n    email: 'admin@tpch.com',\n    name: 'Admin User',\n    role: 'global_admin',\n    password: 'password'\n  },\n  {\n    email: 'director_na@tpch.com',\n    name: 'North America Director',\n    role: 'regional_director',\n    password: 'password'\n  },\n  {\n    email: 'director_eu@tpch.com',\n    name: 'Europe Director',\n    role: 'regional_director',\n    password: 'password'\n  },\n  {\n    email: 'sarah_jones@tpch.com',\n    name: 'Sarah Jones',\n    role: 'sales_rep',\n    password: 'password'\n  },\n  {\n    email: 'mike_chen@tpch.com',\n    name: 'Mike Chen',\n    role: 'sales_rep',\n    password: 'password'\n  }\n];\n\n// Login endpoint\napp.post('/api/login', (req, res) => {\n  const { username, password } = req.body;\n\n  // Find user\n  const user = WORKSHOP_USERS.find(u => u.email === username);\n  \n  if (!user || user.password !== password) {\n    return res.status(401).json({ error: 'Invalid credentials' });\n  }\n\n  // Generate JWT token using Cube API secret with user_id field\n  const token = jwt.sign(\n    { user_id: user.email },\n    process.env.CUBEJS_API_SECRET,\n    { expiresIn: '30d' }\n  );\n\n  // Return user info and token\n  res.json({\n    user: {\n      email: user.email,\n      name: user.name,\n      role: user.role\n    },\n    token\n  });\n});\n\napp.listen(PORT, () => {\n  console.log(`Auth server running on http://localhost:${PORT}`);\n});\n"})}),"\n",(0,a.jsxs)(n.admonition,{type:"info",children:[(0,a.jsx)(n.mdxAdmonitionTitle,{children:(0,a.jsx)(n.strong,{children:"Production Authentication Patterns"})}),(0,a.jsxs)(n.p,{children:["The authentication server above is designed for workshop learning. In a ",(0,a.jsx)(n.strong,{children:"real-world production environment"}),", you would integrate with enterprise authentication systems instead of hardcoded users:"]}),(0,a.jsx)(n.p,{children:(0,a.jsx)(n.strong,{children:"OAuth 2.0 / OpenID Connect Integration:"})}),(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-javascript",children:"// Example: Auth0, Okta, Azure AD, Google OAuth\napp.get('/auth/callback', async (req, res) => {\n  const { code } = req.query;\n  \n  // Exchange code for user info with your OAuth provider\n  const userInfo = await exchangeCodeForUserInfo(code);\n  \n  // Generate Cube JWT with user context\n  const cubeToken = jwt.sign(\n    { \n      user_id: userInfo.sub,\n      email: userInfo.email,\n      department: userInfo.department,\n      role: userInfo.app_role \n    },\n    process.env.CUBEJS_API_SECRET,\n    { expiresIn: '1h' }\n  );\n  \n  res.json({ token: cubeToken, user: userInfo });\n});\n"})}),(0,a.jsx)(n.p,{children:(0,a.jsx)(n.strong,{children:"SAML/LDAP Integration:"})}),(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-javascript",children:"// Example: Enterprise SAML or LDAP authentication\napp.post('/auth/saml', passport.authenticate('saml'), (req, res) => {\n  const user = req.user; // From SAML assertion\n  \n  const cubeToken = jwt.sign(\n    {\n      user_id: user.nameID,\n      department: user.department,\n      cost_center: user.costCenter,\n      manager: user.manager\n    },\n    process.env.CUBEJS_API_SECRET,\n    { expiresIn: '8h' }\n  );\n  \n  res.json({ token: cubeToken });\n});\n"})}),(0,a.jsx)(n.p,{children:(0,a.jsx)(n.strong,{children:"Key Production Security Practices:"})}),(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Never hardcode passwords"})," - Use identity providers (Auth0, Okta, Azure AD)"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Short token expiration"})," - Use 1-8 hour expiry with refresh tokens"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Rich user context"})," - Include department, role, region, etc. in JWT for Cube's row-level security if Cube is expecting to be handed these attributes.  If Cube will look them up from the ",(0,a.jsx)(n.code,{children:"user_id"}),", there's no need to include them in the JWT from this app."]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Token refresh"})," - Implement refresh token rotation for long-lived sessions"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Environment separation"})," - Different ",(0,a.jsx)(n.code,{children:"CUBEJS_API_SECRET"})," per environment"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Audit logging"})," - Track all authentication attempts and token usage"]}),"\n"]}),(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.strong,{children:"Cube Security Context Example:"}),"\nThe JWT payload becomes the initial Cube security context which can drive row-level filtering:"]}),(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-javascript",children:'// This JWT payload...\n{\n  user_id: "sarah.jones@company.com",\n  department: "sales", \n  region: "north_america",\n  role: "regional_director"\n}\n\n// ...enables Cube security filters like:\n// WHERE region = {{ SECURITY_CONTEXT.region }}\n// WHERE department = {{ SECURITY_CONTEXT.department }}\n'})})]}),"\n",(0,a.jsx)(n.h3,{id:"step-3-create-environment-configuration",children:"Step 3: Create Environment Configuration"}),"\n",(0,a.jsxs)(n.p,{children:["Create a ",(0,a.jsx)(n.code,{children:".env"})," file in your project root with your Cube credentials:"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",metastring:'title=".env"',children:"# Your Cube API endpoint\nREACT_APP_CUBE_API_URL=https://your-workspace.cubecloud.dev/cubejs-api/v1\n\n# Your Cube API Secret (from Settings -> Environment Variables)\nCUBEJS_API_SECRET=your-api-secret-here\n\n# Development ports\nPORT=3000\nSERVER_PORT=3031\n"})}),"\n",(0,a.jsx)(n.admonition,{type:"warning",children:(0,a.jsxs)(n.p,{children:["Never commit ",(0,a.jsx)(n.code,{children:".env"})," files with real credentials! Add ",(0,a.jsx)(n.code,{children:".env"})," to your ",(0,a.jsx)(n.code,{children:".gitignore"}),"."]})}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.strong,{children:"Get Your Cube Credentials:"})}),"\n",(0,a.jsxs)(n.ol,{children:["\n",(0,a.jsx)(n.li,{children:"Log into your Cube workspace"}),"\n",(0,a.jsxs)(n.li,{children:["Navigate to ",(0,a.jsx)(n.strong,{children:"Integrations"})," \u2192 ",(0,a.jsx)(n.strong,{children:"API Credentials"})," \u2192 ",(0,a.jsx)(n.strong,{children:"REST API"})]}),"\n",(0,a.jsxs)(n.li,{children:["Copy your REST API endpoint and replace ",(0,a.jsx)(n.code,{children:"REACT_APP_CUBE_API_URL"})]}),"\n"]}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.img,{alt:"Cube API Endpoint",src:t(5690).A+"",width:"2044",height:"1138"})}),"\n",(0,a.jsxs)(n.ol,{start:"4",children:["\n",(0,a.jsxs)(n.li,{children:["Navigate to ",(0,a.jsx)(n.strong,{children:"Settings"})," \u2192 ",(0,a.jsx)(n.strong,{children:"Environment Variables"})," and click ",(0,a.jsx)(n.strong,{children:"Reveal All Values"})," under ",(0,a.jsx)(n.strong,{children:"Environment Variables"})]}),"\n",(0,a.jsxs)(n.li,{children:["Show and copy the value for ",(0,a.jsx)(n.code,{children:"CUBEJS_API_SECRET"})," to your .env file"]}),"\n",(0,a.jsx)(n.li,{children:"Save and close your .env file"}),"\n"]}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.img,{alt:"Cube API Secret",src:t(6089).A+"",width:"3004",height:"1286"})}),"\n",(0,a.jsx)(n.h3,{id:"step-4-create-authentication-context",children:"Step 4: Create Authentication Context"}),"\n",(0,a.jsx)(n.p,{children:"This manages user authentication state across the entire app. We'll integrate it with the Cube API service in Part 2."}),"\n",(0,a.jsxs)(n.p,{children:["Create ",(0,a.jsx)(n.code,{children:"src/contexts/AuthContext.tsx"}),":"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-typescript",metastring:'title="src/contexts/AuthContext.tsx"',children:"import React, { createContext, useContext, useState, useEffect, ReactNode } from 'react';\n\ninterface User {\n  email: string;\n  name: string;\n  role: string;\n  token: string;\n}\n\ninterface AuthContextType {\n  user: User | null;\n  isAuthenticated: boolean;\n  login: (email: string, name: string, role: string, token: string) => void;\n  logout: () => void;\n}\n\nconst AuthContext = createContext<AuthContextType | undefined>(undefined);\n\nexport const useAuth = () => {\n  const context = useContext(AuthContext);\n  if (context === undefined) {\n    throw new Error('useAuth must be used within an AuthProvider');\n  }\n  return context;\n};\n\ninterface AuthProviderProps {\n  children: ReactNode;\n}\n\nexport const AuthProvider: React.FC<AuthProviderProps> = ({ children }) => {\n  const [user, setUser] = useState<User | null>(null);\n\n  // Check for existing session on mount\n  useEffect(() => {\n    const savedUser = localStorage.getItem('workshop_user');\n    if (savedUser) {\n      try {\n        const userData = JSON.parse(savedUser);\n        setUser(userData);\n        // TODO: Will update Cube API service in Part 2\n      } catch (error) {\n        // Clear invalid session data\n        localStorage.removeItem('workshop_user');\n      }\n    }\n  }, []);\n\n  const login = (email: string, name: string, role: string, token: string) => {\n    const userData = { email, name, role, token };\n    setUser(userData);\n    localStorage.setItem('workshop_user', JSON.stringify(userData));\n    \n    // TODO: Will update Cube API service in Part 2\n    \n    console.log('\ud83d\udd10 User logged in:', { email, name, role });\n    console.log('\ud83c\udfab JWT token generated and set');\n  };\n\n  const logout = () => {\n    setUser(null);\n    localStorage.removeItem('workshop_user');\n    \n    // TODO: Will reset Cube API service in Part 2\n    \n    console.log('\ud83d\udeaa User logged out');\n  };\n\n  return (\n    <AuthContext.Provider value={{ user, isAuthenticated: !!user, login, logout }}>\n      {children}\n    </AuthContext.Provider>\n  );\n};\n\nexport default AuthContext;\n"})}),"\n",(0,a.jsx)(n.h3,{id:"step-5-create-login-form-component",children:"Step 5: Create Login Form Component"}),"\n",(0,a.jsx)(n.p,{children:"This provides a clean login interface for workshop participants to authenticate with different user accounts."}),"\n",(0,a.jsxs)(n.p,{children:["Create ",(0,a.jsx)(n.code,{children:"src/components/LoginForm.tsx"}),":"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-typescript",metastring:'title="src/components/LoginForm.tsx"',children:'import React, { useState } from \'react\';\nimport {\n  Container,\n  Paper,\n  TextField,\n  Button,\n  Typography,\n  Box,\n  Alert,\n} from \'@mui/material\';\nimport axios from \'axios\';\n\ninterface LoginFormProps {\n  onLogin: (email: string, name: string, role: string, token: string) => void;\n}\n\n\nconst LoginForm: React.FC<LoginFormProps> = ({ onLogin }) => {\n  const [username, setUsername] = useState(\'\');\n  const [password, setPassword] = useState(\'\');\n  const [error, setError] = useState(\'\');\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n    setError(\'\');\n    \n    try {\n      const response = await axios.post(\'http://localhost:3031/api/login\', {\n        username,\n        password\n      });\n      \n      const { user, token } = response.data;\n      onLogin(user.email, user.name, user.role, token);\n    } catch (error: any) {\n      if (error.response?.status === 401) {\n        setError(\'Invalid username or password\');\n      } else {\n        setError(\'Login failed. Please try again.\');\n      }\n    }\n  };\n\n  return (\n    <Container maxWidth="sm" sx={{ mt: 8 }}>\n      <Paper elevation={3} sx={{ p: 4 }}>\n        <Box textAlign="center" mb={3}>\n          <Typography variant="h4" component="h1" gutterBottom>\n            TPC-H Analytics Login\n          </Typography>\n          <Typography variant="body2" color="text.secondary">\n            Workshop Authentication Demo\n          </Typography>\n        </Box>\n\n        <form onSubmit={handleSubmit}>\n          <TextField\n            fullWidth\n            label="Username"\n            value={username}\n            onChange={(e) => setUsername(e.target.value)}\n            margin="normal"\n            placeholder="e.g., admin@tpch.com"\n            autoComplete="username"\n          />\n\n          <TextField\n            fullWidth\n            type="password"\n            label="Password"\n            value={password}\n            onChange={(e) => setPassword(e.target.value)}\n            margin="normal"\n            placeholder="password"\n            autoComplete="current-password"\n          />\n\n          {error && (\n            <Alert severity="error" sx={{ mt: 2 }}>\n              {error}\n            </Alert>\n          )}\n\n          <Button\n            type="submit"\n            fullWidth\n            variant="contained"\n            sx={{ mt: 3, mb: 2 }}\n            disabled={!username || !password}\n          >\n            Login\n          </Button>\n        </form>\n      </Paper>\n    </Container>\n  );\n};\n\nexport default LoginForm;\n'})}),"\n",(0,a.jsx)(n.h3,{id:"step-6-create-basic-app-structure",children:"Step 6: Create Basic App Structure"}),"\n",(0,a.jsx)(n.p,{children:"Update your main App.tsx to integrate authentication and create the basic app shell:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-typescript",metastring:'title="src/App.tsx"',children:'import React from \'react\';\nimport { ThemeProvider, createTheme } from \'@mui/material/styles\';\nimport CssBaseline from \'@mui/material/CssBaseline\';\nimport { \n  Box,\n  Container,\n  IconButton,\n  Link\n} from \'@mui/material\';\nimport { GitHub, Description } from \'@mui/icons-material\';\nimport { AuthProvider, useAuth } from \'./contexts/AuthContext\';\nimport LoginForm from \'./components/LoginForm\';\n\n// Create Material-UI theme\nconst theme = createTheme({\n  palette: {\n    mode: \'light\',\n    primary: {\n      main: \'#1976d2\',\n    },\n    secondary: {\n      main: \'#dc004e\',\n    },\n    background: {\n      default: \'#f5f5f5\',\n    },\n  },\n  typography: {\n    h4: {\n      fontWeight: 600,\n    },\n    h6: {\n      fontWeight: 500,\n    },\n  },\n  components: {\n    MuiCard: {\n      styleOverrides: {\n        root: {\n          boxShadow: \'0 2px 8px rgba(0,0,0,0.1)\',\n          borderRadius: 12,\n        },\n      },\n    },\n    MuiButton: {\n      styleOverrides: {\n        root: {\n          borderRadius: 8,\n        },\n      },\n    },\n  },\n});\n\n// Main app component that handles authentication state\nconst AppContent: React.FC = () => {\n  const { isAuthenticated, login } = useAuth();\n\n  if (!isAuthenticated) {\n    return <LoginForm onLogin={login} />;\n  }\n\n  return (\n    <Box sx={{ flexGrow: 1 }}>\n      <main>\n        <Container maxWidth="lg" sx={{ mt: 4, mb: 4 }}>\n          <Box textAlign="center" py={8}>\n            <h1>\ud83c\udf89 Authentication Successful!</h1>\n            <p>You\'re now logged in. We\'ll add the dashboard components in the next parts.</p>\n          </Box>\n        </Container>\n      </main>\n\n      <Box \n        component="footer" \n        sx={{ \n          bgcolor: \'background.paper\', \n          py: 3, \n          mt: 6,\n          borderTop: 1,\n          borderColor: \'divider\'\n        }}\n      >\n        <Container maxWidth="lg">\n          <Box sx={{ display: \'flex\', alignItems: \'center\', justifyContent: \'center\', gap: 1, mb: 1 }}>\n            <IconButton \n              color="primary" \n              href="https://cube.dev/docs" \n              target="_blank"\n              title="Cube Documentation"\n              size="small"\n            >\n              <Description />\n            </IconButton>\n            <IconButton \n              color="primary" \n              href="https://github.com/cube-js/cube" \n              target="_blank"\n              title="Cube on GitHub"\n              size="small"\n            >\n              <GitHub />\n            </IconButton>\n          </Box>\n          <Box sx={{ textAlign: \'center\' }}>\n            <Link href="https://cube.dev" target="_blank" color="primary" sx={{ mr: 1 }}>\n              Cube\n            </Link>\n            \u2022\n            <Link href="https://react.dev" target="_blank" color="primary" sx={{ mx: 1 }}>\n              React\n            </Link>\n            \u2022\n            <Link href="https://mui.com" target="_blank" color="primary" sx={{ mx: 1 }}>\n              Material-UI\n            </Link>\n            \u2022\n            <Link href="https://chartjs.org" target="_blank" color="primary" sx={{ ml: 1 }}>\n              Chart.js\n            </Link>\n          </Box>\n        </Container>\n      </Box>\n    </Box>\n  );\n};\n\nfunction App() {\n  return (\n    <ThemeProvider theme={theme}>\n      <CssBaseline />\n      <AuthProvider>\n        <AppContent />\n      </AuthProvider>\n    </ThemeProvider>\n  );\n}\n\nexport default App;\n'})}),"\n",(0,a.jsx)(n.h3,{id:"step-7-update-package-scripts",children:"Step 7: Update Package Scripts"}),"\n",(0,a.jsxs)(n.p,{children:["Update the ",(0,a.jsx)(n.code,{children:"scripts"})," section of your package.json to run both the React app and authentication server:"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-json",metastring:'title="package.json"',children:'\n  "scripts": {\n    "start": "concurrently \\"npm run server\\" \\"npm run client\\"",\n    "client": "react-scripts start",\n    "server": "node server.js",\n    "build": "react-scripts build",\n    "test": "react-scripts test",\n    "eject": "react-scripts eject"\n  }\n\n'})}),"\n",(0,a.jsx)(n.h3,{id:"step-8-test-authentication",children:"Step 8: Test Authentication"}),"\n",(0,a.jsx)(n.p,{children:"Now test your authentication setup:"}),"\n",(0,a.jsxs)(o.A,{groupId:"operating-systems",children:[(0,a.jsx)(i.A,{value:"mac",label:"macOS",children:(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"npm start\n"})})}),(0,a.jsx)(i.A,{value:"windows",label:"Windows",children:(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-cmd",children:"npm start\n"})})})]}),"\n",(0,a.jsx)(n.p,{children:"You should see:"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:"Auth server starting on port 3031"}),"\n",(0,a.jsx)(n.li,{children:"React app starting on port 3000"}),"\n",(0,a.jsxs)(n.li,{children:["Login form at ",(0,a.jsx)(n.code,{children:"http://localhost:3000"})]}),"\n"]}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.strong,{children:"Test with one of these accounts:"})}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"admin@tpch.com"})," / ",(0,a.jsx)(n.code,{children:"password"})," (global admin)"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"director_na@tpch.com"})," / ",(0,a.jsx)(n.code,{children:"password"})," (regional director)"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"sarah_jones@tpch.com"})," / ",(0,a.jsx)(n.code,{children:"password"})," (sales rep)"]}),"\n"]}),"\n",(0,a.jsx)(n.p,{children:"After successful login, you should see a success message. The foundation is now set!"}),"\n",(0,a.jsxs)(n.admonition,{type:"tip",children:[(0,a.jsxs)(n.p,{children:["We haven't created the logout button yet, so if you want to log out right now, open up ",(0,a.jsx)(n.strong,{children:"Developer tools"})," in the browser, open the ",(0,a.jsx)(n.strong,{children:"Application"})," tab, and navigate to ",(0,a.jsxs)(n.strong,{children:["Storage -> Local Storage -> ",(0,a.jsx)(n.a,{href:"http://localhost:3000",children:"http://localhost:3000"})]}),".  Right click the ",(0,a.jsx)(n.code,{children:"workshop_user"})," key and click ",(0,a.jsx)(n.strong,{children:"Delete"}),".  Then refresh the page."]}),(0,a.jsx)(n.p,{children:(0,a.jsx)(n.img,{alt:"Delete Session",src:t(1692).A+"",width:"3086",height:"862"})})]}),"\n",(0,a.jsx)(n.hr,{}),"\n",(0,a.jsx)(n.h2,{id:"part-2-api-layer--types",children:"Part 2: API Layer & Types"}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.em,{children:"Goal: Connect to Cube and establish data contracts"})}),"\n",(0,a.jsx)(n.h3,{id:"step-1-create-typescript-interfaces",children:"Step 1: Create TypeScript Interfaces"}),"\n",(0,a.jsx)(n.p,{children:"Create the data contracts for our Cube API integration."}),"\n",(0,a.jsxs)(n.p,{children:["Create ",(0,a.jsx)(n.code,{children:"src/types/cube.ts"}),":"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-typescript",metastring:'title="src/types/cube.ts"',children:"// Cube API response types\nexport interface CubeQueryResponse {\n  query: CubeQuery;\n  data: CubeDataRow[];\n  annotation: {\n    measures: Record<string, CubeMeasureAnnotation>;\n    dimensions: Record<string, CubeDimensionAnnotation>;\n    timeDimensions: Record<string, CubeTimeDimensionAnnotation>;\n  };\n}\n\nexport interface CubeQuery {\n  measures?: string[];\n  dimensions?: string[];\n  timeDimensions?: CubeTimeDimension[];\n  filters?: CubeFilter[];\n  order?: CubeOrder;\n  limit?: number;\n  offset?: number;\n}\n\nexport interface CubeTimeDimension {\n  dimension: string;\n  granularity?: string;\n  dateRange?: string | string[];\n}\n\nexport interface CubeFilter {\n  member: string;\n  operator: string;\n  values: string[];\n}\n\nexport interface CubeOrder {\n  [key: string]: 'asc' | 'desc';\n}\n\nexport interface CubeDataRow {\n  [key: string]: string | number | null;\n}\n\nexport interface CubeMeasureAnnotation {\n  title: string;\n  shortTitle: string;\n  type: string;\n  format?: string;\n}\n\nexport interface CubeDimensionAnnotation {\n  title: string;\n  shortTitle: string;\n  type: string;\n}\n\nexport interface CubeTimeDimensionAnnotation {\n  title: string;\n  shortTitle: string;\n  type: string;\n}\n\n// Dashboard-specific types\nexport interface MetricCardData {\n  title: string;\n  value: string | number;\n  format?: string;\n  change?: number;\n  isLoading?: boolean;\n}\n\nexport interface ChartData {\n  labels: string[];\n  datasets: {\n    label: string;\n    data: number[];\n    backgroundColor?: string | string[];\n    borderColor?: string;\n    borderWidth?: number;\n  }[];\n}\n"})}),"\n",(0,a.jsx)(n.h3,{id:"step-2-create-cube-api-service",children:"Step 2: Create Cube API Service"}),"\n",(0,a.jsx)(n.p,{children:"This service handles all Cube API communications with proper error handling and caching."}),"\n",(0,a.jsxs)(n.p,{children:["Create ",(0,a.jsx)(n.code,{children:"src/services/cubeApi.ts"}),":"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-typescript",metastring:'title="src/services/cubeApi.ts"',children:"import axios from 'axios';\nimport { CubeQuery, CubeQueryResponse } from '../types/cube';\n\n// Configuration - replace these with your actual values\nconst CUBE_API_URL = process.env.REACT_APP_CUBE_API_URL || 'YOUR_CUBE_ENDPOINT_HERE';\nconst CUBE_API_TOKEN = process.env.REACT_APP_CUBE_API_TOKEN || 'YOUR_BEARER_TOKEN_HERE';\n\nclass CubeApiService {\n  private apiUrl: string;\n  private token: string;\n\n  constructor() {\n    this.apiUrl = CUBE_API_URL;\n    this.token = CUBE_API_TOKEN;\n  }\n\n  // Update configuration\n  updateConfig(apiUrl: string, token: string) {\n    this.apiUrl = apiUrl;\n    this.token = token;\n    console.log('\ud83d\udd27 Cube API configuration updated with new JWT token');\n  }\n\n  // Set token (convenience method)\n  setToken(token: string) {\n    this.token = token;\n    console.log('\ud83d\udd27 Cube API token updated');\n  }\n\n  // Check if configuration is valid\n  isConfigured(): boolean {\n    const configured = this.apiUrl !== 'YOUR_CUBE_ENDPOINT_HERE' && \n           this.token !== 'YOUR_BEARER_TOKEN_HERE' &&\n           this.apiUrl.length > 0 && \n           this.token.length > 0;\n    \n    // Debug logging\n    console.log('\ud83d\udc1b Cube API Configuration:', {\n      apiUrl: this.apiUrl,\n      tokenPrefix: this.token.substring(0, 20) + '...',\n      configured\n    });\n    \n    return configured;\n  }\n\n  // Main query method\n  async query(query: CubeQuery): Promise<CubeQueryResponse> {\n    if (!this.isConfigured()) {\n      throw new Error('Cube API not configured. Please set your endpoint and token.');\n    }\n\n    try {\n      console.log('\ud83d\ude80 Making Cube API request:', {\n        url: `${this.apiUrl}/load`,\n        query: JSON.stringify(query, null, 2),\n        tokenPrefix: this.token.substring(0, 20) + '...'\n      });\n\n      // Use GET with URL-encoded query parameter (like in the docs)\n      const queryParam = encodeURIComponent(JSON.stringify(query));\n      const response = await axios.get(\n        `${this.apiUrl}/load?query=${queryParam}`,\n        {\n          headers: {\n            'Authorization': this.token,\n          },\n        }\n      );\n\n      console.log('\u2705 Cube API response received:', response.status);\n      return response.data;\n    } catch (error) {\n      console.error('\u274c Cube API Error:', error);\n      if (axios.isAxiosError(error)) {\n        console.error('\ud83d\udccb Error details:', {\n          status: error.response?.status,\n          statusText: error.response?.statusText,\n          data: error.response?.data,\n          url: error.config?.url\n        });\n        \n        if (error.response?.status === 401) {\n          throw new Error('Authentication failed. Please check your Bearer token.');\n        }\n        if (error.response?.status === 403) {\n          throw new Error('Access denied. Please check your permissions.');\n        }\n        if (error.response?.status === 400) {\n          throw new Error(`Bad Request: ${JSON.stringify(error.response?.data) || error.response?.statusText || error.message}`);\n        }\n        if (error.response?.status === 500) {\n          throw new Error(`Server Error: ${JSON.stringify(error.response?.data) || error.response?.statusText || error.message}`);\n        }\n        throw new Error(`API Error: ${error.response?.statusText || error.message}`);\n      }\n      throw error;\n    }\n  }\n\n  // Simple test query to verify API connection\n  async testConnection(): Promise<CubeQueryResponse> {\n    return this.query({\n      measures: ['customer_behavior.count']\n    });\n  }\n}\n\n// Export singleton instance\nexport const cubeApi = new CubeApiService();\nexport default cubeApi;\n"})}),"\n",(0,a.jsx)(n.h3,{id:"step-3-update-authcontext-for-cube-integration",children:"Step 3: Update AuthContext for Cube Integration"}),"\n",(0,a.jsx)(n.p,{children:"Now that we have our Cube API service, let's update the AuthContext to integrate with it."}),"\n",(0,a.jsxs)(n.p,{children:["Update ",(0,a.jsx)(n.code,{children:"src/contexts/AuthContext.tsx"}),":"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-typescript",metastring:'title="src/contexts/AuthContext.tsx" {2,42-44,58-59}',children:"import React, { createContext, useContext, useState, useEffect, ReactNode } from 'react';\nimport cubeApi from '../services/cubeApi';\n\ninterface User {\n  email: string;\n  name: string;\n  role: string;\n  token: string;\n}\n\ninterface AuthContextType {\n  user: User | null;\n  isAuthenticated: boolean;\n  login: (email: string, name: string, role: string, token: string) => void;\n  logout: () => void;\n}\n\nconst AuthContext = createContext<AuthContextType | undefined>(undefined);\n\nexport const useAuth = () => {\n  const context = useContext(AuthContext);\n  if (!context) {\n    throw new Error('useAuth must be used within an AuthProvider');\n  }\n  return context;\n};\n\ninterface AuthProviderProps {\n  children: ReactNode;\n}\n\nexport const AuthProvider: React.FC<AuthProviderProps> = ({ children }) => {\n  const [user, setUser] = useState<User | null>(null);\n\n  // Check for existing session on mount\n  useEffect(() => {\n    const savedUser = localStorage.getItem('workshop_user');\n    if (savedUser) {\n      try {\n        const userData = JSON.parse(savedUser);\n        setUser(userData);\n        // Update Cube API service with JWT token\n        if (userData.token) {\n          cubeApi.setToken(userData.token);\n        }\n      } catch (error) {\n        // Clear invalid session data\n        localStorage.removeItem('workshop_user');\n      }\n    }\n  }, []);\n\n  const login = (email: string, name: string, role: string, token: string) => {\n    const userData = { email, name, role, token };\n    setUser(userData);\n    localStorage.setItem('workshop_user', JSON.stringify(userData));\n    \n    // Update Cube API service with JWT token\n    cubeApi.setToken(token);\n    \n    console.log('\ud83d\udd10 User logged in:', { email, name, role });\n    console.log('\ud83c\udfab JWT token generated and set');\n  };\n\n  const logout = () => {\n    setUser(null);\n    localStorage.removeItem('workshop_user');\n    \n    console.log('\ud83d\udeaa User logged out');\n  };\n\n  return (\n    <AuthContext.Provider value={{ user, isAuthenticated: !!user, login, logout }}>\n      {children}\n    </AuthContext.Provider>\n  );\n};\n"})}),"\n",(0,a.jsx)(n.hr,{}),"\n",(0,a.jsx)(n.h2,{id:"part-3-app-layout--header",children:"Part 3: App Layout & Header"}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.em,{children:"Goal: Create the main app structure"})}),"\n",(0,a.jsx)(n.h3,{id:"step-1-create-header-component",children:"Step 1: Create Header Component"}),"\n",(0,a.jsx)(n.p,{children:"This creates a navigation bar showing the user's information and role."}),"\n",(0,a.jsxs)(n.p,{children:["Create ",(0,a.jsx)(n.code,{children:"src/components/Header.tsx"}),":"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-typescript",metastring:'title="src/components/Header.tsx"',children:"import React from 'react';\nimport {\n  AppBar,\n  Toolbar,\n  Typography,\n  Button,\n  Box,\n  Chip,\n} from '@mui/material';\nimport { LogoutOutlined, PersonOutlined } from '@mui/icons-material';\nimport { useAuth } from '../contexts/AuthContext';\n\nconst Header: React.FC = () => {\n  const { user, logout } = useAuth();\n\n  const getRoleColor = (role: string) => {\n    switch (role) {\n      case 'global_admin':\n        return 'error';\n      case 'regional_director':\n        return 'warning';\n      case 'sales_rep':\n        return 'info';\n      default:\n        return 'default';\n    }\n  };\n\n  const getRoleLabel = (role: string) => {\n    switch (role) {\n      case 'global_admin':\n        return 'Admin';\n      case 'regional_director':\n        return 'Director';\n      case 'sales_rep':\n        return 'Sales Rep';\n      default:\n        return role;\n    }\n  };\n\n  return (\n    <AppBar position=\"static\" elevation={1}>\n      <Toolbar>\n        <Box display=\"flex\" alignItems=\"center\" gap={2} flexGrow={1}>\n          <Typography variant=\"h6\" component=\"div\">\n            TPC-H Analytics\n          </Typography>\n        </Box>\n        \n        {user && (\n          <Box display=\"flex\" alignItems=\"center\" gap={2}>\n            <Box display=\"flex\" alignItems=\"center\" gap={1}>\n              <PersonOutlined fontSize=\"small\" />\n              <Typography variant=\"body2\">\n                {user.name}\n              </Typography>\n              <Chip \n                label={getRoleLabel(user.role)}\n                size=\"small\"\n                color={getRoleColor(user.role)}\n                variant=\"outlined\"\n                sx={{ color: 'white', borderColor: 'rgba(255,255,255,0.5)' }}\n              />\n            </Box>\n            \n            <Button\n              color=\"inherit\"\n              onClick={logout}\n              startIcon={<LogoutOutlined />}\n              size=\"small\"\n            >\n              Logout\n            </Button>\n          </Box>\n        )}\n      </Toolbar>\n    </AppBar>\n  );\n};\n\nexport default Header;\n"})}),"\n",(0,a.jsx)(n.h3,{id:"step-2-create-main-dashboard-layout",children:"Step 2: Create Main Dashboard Layout"}),"\n",(0,a.jsx)(n.p,{children:"Create a placeholder dashboard component that we'll fill with real components."}),"\n",(0,a.jsxs)(n.p,{children:["Create ",(0,a.jsx)(n.code,{children:"src/components/Dashboard.tsx"}),":"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-typescript",metastring:'title="src/components/Dashboard.tsx"',children:'import React from \'react\';\nimport {\n  Container,\n  Grid,\n  Typography,\n  Paper,\n  Box,\n} from \'@mui/material\';\n\nconst Dashboard: React.FC = () => {\n  return (\n    <Container maxWidth="lg" sx={{ mt: 4, mb: 4 }}>\n      <Typography variant="h4" component="h1" gutterBottom>\n        TPC-H Analytics Dashboard\n      </Typography>\n      <Typography variant="subtitle1" color="text.secondary" paragraph>\n        Real-time insights into B2B e-commerce performance\n      </Typography>\n\n      <Grid container spacing={3}>\n        {/* KPI Cards Row */}\n        <Grid item xs={12}>\n          <Paper sx={{ p: 3, textAlign: \'center\', minHeight: 120 }}>\n            <Typography variant="h6" gutterBottom>Key Performance Indicators</Typography>\n            <Typography color="text.secondary">\n              KPI cards will be added in Part 5\n            </Typography>\n          </Paper>\n        </Grid>\n\n        {/* Charts Row */}\n        <Grid item xs={12} md={8}>\n          <Paper sx={{ p: 3, height: 400 }}>\n            <Typography variant="h6" gutterBottom>Revenue Trend</Typography>\n            <Box \n              display="flex" \n              alignItems="center" \n              justifyContent="center" \n              height="90%"\n            >\n              <Typography color="text.secondary">\n                Revenue chart will be added in Part 6\n              </Typography>\n            </Box>\n          </Paper>\n        </Grid>\n        \n        <Grid item xs={12} md={4}>\n          <Paper sx={{ p: 3, height: 400 }}>\n            <Typography variant="h6" gutterBottom>Customer Segments</Typography>\n            <Box \n              display="flex" \n              alignItems="center" \n              justifyContent="center" \n              height="90%"\n            >\n              <Typography color="text.secondary">\n                Pie chart will be added in Part 6\n              </Typography>\n            </Box>\n          </Paper>\n        </Grid>\n      </Grid>\n    </Container>\n  );\n};\n\nexport default Dashboard;\n'})}),"\n",(0,a.jsx)(n.h3,{id:"step-3-update-apptsx-with-header-and-dashboard",children:"Step 3: Update App.tsx with Header and Dashboard"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-typescript",metastring:'title="src/App.tsx" {12,14,67-71}',children:'import React from \'react\';\nimport { ThemeProvider, createTheme } from \'@mui/material/styles\';\nimport CssBaseline from \'@mui/material/CssBaseline\';\nimport { \n  Box,\n  Container,\n  IconButton,\n  Link\n} from \'@mui/material\';\nimport { GitHub, Description } from \'@mui/icons-material\';\nimport { AuthProvider, useAuth } from \'./contexts/AuthContext\';\nimport Dashboard from \'./components/Dashboard\';\nimport LoginForm from \'./components/LoginForm\';\nimport Header from \'./components/Header\';\n\n// Create Material-UI theme\nconst theme = createTheme({\n  palette: {\n    mode: \'light\',\n    primary: {\n      main: \'#1976d2\',\n    },\n    secondary: {\n      main: \'#dc004e\',\n    },\n    background: {\n      default: \'#f5f5f5\',\n    },\n  },\n  typography: {\n    h4: {\n      fontWeight: 600,\n    },\n    h6: {\n      fontWeight: 500,\n    },\n  },\n  components: {\n    MuiCard: {\n      styleOverrides: {\n        root: {\n          boxShadow: \'0 2px 8px rgba(0,0,0,0.1)\',\n          borderRadius: 12,\n        },\n      },\n    },\n    MuiButton: {\n      styleOverrides: {\n        root: {\n          borderRadius: 8,\n        },\n      },\n    },\n  },\n});\n\n// Main app component that handles authentication state\nconst AppContent: React.FC = () => {\n  const { isAuthenticated, login } = useAuth();\n\n  if (!isAuthenticated) {\n    return <LoginForm onLogin={login} />;\n  }\n\n  return (\n    <Box sx={{ flexGrow: 1 }}>\n      <Header />\n\n      <main>\n        <Dashboard />\n      </main>\n\n      <Box \n        component="footer" \n        sx={{ \n          bgcolor: \'background.paper\', \n          py: 3, \n          mt: 6,\n          borderTop: 1,\n          borderColor: \'divider\'\n        }}\n      >\n        <Container maxWidth="lg">\n          <Box sx={{ display: \'flex\', alignItems: \'center\', justifyContent: \'center\', gap: 1, mb: 1 }}>\n            <IconButton \n              color="primary" \n              href="https://cube.dev/docs" \n              target="_blank"\n              title="Cube Documentation"\n              size="small"\n            >\n              <Description />\n            </IconButton>\n            <IconButton \n              color="primary" \n              href="https://github.com/cube-js/cube" \n              target="_blank"\n              title="Cube on GitHub"\n              size="small"\n            >\n              <GitHub />\n            </IconButton>\n          </Box>\n          <Box sx={{ textAlign: \'center\' }}>\n            <Link href="https://cube.dev" target="_blank" color="primary" sx={{ mr: 1 }}>\n              Cube\n            </Link>\n            \u2022\n            <Link href="https://react.dev" target="_blank" color="primary" sx={{ mx: 1 }}>\n              React\n            </Link>\n            \u2022\n            <Link href="https://mui.com" target="_blank" color="primary" sx={{ mx: 1 }}>\n              Material-UI\n            </Link>\n            \u2022\n            <Link href="https://chartjs.org" target="_blank" color="primary" sx={{ ml: 1 }}>\n              Chart.js\n            </Link>\n          </Box>\n        </Container>\n      </Box>\n    </Box>\n  );\n};\n\nfunction App() {\n  return (\n    <ThemeProvider theme={theme}>\n      <CssBaseline />\n      <AuthProvider>\n        <AppContent />\n      </AuthProvider>\n    </ThemeProvider>\n  );\n}\n\nexport default App;\n'})}),"\n",(0,a.jsx)(n.p,{children:"Now when you login, you should see:"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:"Header with user info and role badge"}),"\n",(0,a.jsx)(n.li,{children:"Main dashboard layout with placeholders"}),"\n",(0,a.jsx)(n.li,{children:"Footer with tech stack links"}),"\n"]}),"\n",(0,a.jsx)(n.p,{children:"The app structure is now complete and ready for data components!"}),"\n",(0,a.jsx)(n.hr,{}),"\n",(0,a.jsx)(n.h2,{id:"part-4-global-filters",children:"Part 4: Global Filters"}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.em,{children:"Goal: Build reusable filter system"})}),"\n",(0,a.jsx)(n.h3,{id:"step-1-add-api-methods-for-filter-data",children:"Step 1: Add API Methods for Filter Data"}),"\n",(0,a.jsx)(n.p,{children:"First, update your Cube API service to include methods for loading filter options.  This adds 3 methods near the end of the file:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-typescript",metastring:'title="src/services/cubeApi.ts" {10-38}',children:"// ... existing code ...\n\n  // Simple test query to verify API connection\n  async testConnection(): Promise<CubeQueryResponse> {\n    return this.query({\n      measures: ['customer_behavior.count']\n    });\n  }\n\n  // Get all regions for filter dropdown\n  async getRegions(): Promise<CubeQueryResponse> {\n    return this.query({\n      dimensions: ['sales.region']\n    });\n  }\n\n  // Get customer segments for filter dropdown  \n  async getCustomerSegments(): Promise<CubeQueryResponse> {\n    return this.query({\n      dimensions: ['customer_behavior.customers_segment']\n    });\n  }\n\n  // Main dashboard queries optimized for pre-aggregations\n  async getKPIs(filters: any[] = []): Promise<CubeQueryResponse> {\n    return this.query({\n      measures: [\n        'customer_behavior.count',\n        'customer_behavior.total_revenue', \n        'customer_behavior.average_order_value'\n      ],\n      timeDimensions: [{\n        dimension: 'customer_behavior.order_date',\n        dateRange: 'last 12 months'\n      }],\n      filters\n    });\n  }\n}\n\n// Export singleton instance\nexport const cubeApi = new CubeApiService();\nexport default cubeApi;\n"})}),"\n",(0,a.jsx)(n.h3,{id:"step-2-create-filter-bar-component",children:"Step 2: Create Filter Bar Component"}),"\n",(0,a.jsx)(n.p,{children:"This creates a reusable filter component with region and customer segment dropdowns that affect all dashboard data."}),"\n",(0,a.jsxs)(n.p,{children:["Create ",(0,a.jsx)(n.code,{children:"src/components/FilterBar.tsx"}),":"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-typescript",metastring:'title="src/components/FilterBar.tsx"',children:"import React, { useState, useEffect, useRef } from 'react';\nimport {\n  Box,\n  FormControl,\n  InputLabel,\n  Select,\n  MenuItem,\n  Chip,\n  OutlinedInput,\n  SelectChangeEvent,\n  CircularProgress,\n} from '@mui/material';\nimport { CubeFilter } from '../types/cube';\nimport cubeApi from '../services/cubeApi';\n\ninterface FilterBarProps {\n  onFiltersChange: (filters: CubeFilter[]) => void;\n  disabled?: boolean;\n}\n\nconst FilterBar: React.FC<FilterBarProps> = ({ onFiltersChange, disabled = false }) => {\n  const [selectedRegions, setSelectedRegions] = useState<string[]>([]);\n  const [selectedSegments, setSelectedSegments] = useState<string[]>([]);\n  const [availableRegions, setAvailableRegions] = useState<string[]>([]);\n  const [availableSegments, setAvailableSegments] = useState<string[]>([]);\n  const [loading, setLoading] = useState(true);\n  \n  // Track previous filters to avoid unnecessary updates\n  const prevFiltersRef = useRef<string>('');\n\n  const updateFilters = () => {\n    const filters: CubeFilter[] = [];\n\n    // Use compatible filter paths that don't create join loops\n    if (selectedRegions.length > 0) {\n      // For region filter, use customer_behavior view to avoid join loops\n      filters.push({\n        member: 'customer_behavior.region',\n        operator: 'equals',\n        values: selectedRegions\n      });\n    }\n\n    if (selectedSegments.length > 0) {\n      filters.push({\n        member: 'customer_behavior.customers_segment',\n        operator: 'equals',\n        values: selectedSegments\n      });\n    }\n\n    // Only call onFiltersChange if filters actually changed\n    const filtersString = JSON.stringify(filters);\n    if (filtersString !== prevFiltersRef.current) {\n      console.log('\ud83d\udd04 FilterBar: Filters changed, updating:', filters);\n      prevFiltersRef.current = filtersString;\n      onFiltersChange(filters);\n    } else {\n      console.log('\ud83d\udeab FilterBar: Filters unchanged, skipping update');\n    }\n  };\n\n  const loadFilterOptions = async () => {\n    try {\n      setLoading(true);\n      \n      const [regionsResponse, segmentsResponse] = await Promise.all([\n        cubeApi.getRegions(),\n        cubeApi.getCustomerSegments()\n      ]);\n\n      const regions = regionsResponse.data.map(row => row['sales.region'] as string).filter(Boolean);\n      const segments = segmentsResponse.data.map(row => row['customer_behavior.customers_segment'] as string).filter(Boolean);\n\n      setAvailableRegions(Array.from(new Set(regions)).sort());\n      setAvailableSegments(Array.from(new Set(segments)).sort());\n    } catch (error) {\n      console.error('Failed to load filter options:', error);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  useEffect(() => {\n    loadFilterOptions();\n  }, []);\n\n  useEffect(() => {\n    updateFilters();\n  }, [selectedRegions, selectedSegments]); // Remove updateFilters from dependencies\n\n  const handleRegionChange = (event: SelectChangeEvent<string[]>) => {\n    const value = event.target.value;\n    const newValue = typeof value === 'string' ? value.split(',') : value;\n    \n    // If \"All\" (empty string) is selected, clear the selection\n    if (newValue.includes('')) {\n      setSelectedRegions([]);\n    } else {\n      setSelectedRegions(newValue);\n    }\n  };\n\n  const handleSegmentChange = (event: SelectChangeEvent<string[]>) => {\n    const value = event.target.value;\n    const newValue = typeof value === 'string' ? value.split(',') : value;\n    \n    // If \"All\" (empty string) is selected, clear the selection\n    if (newValue.includes('')) {\n      setSelectedSegments([]);\n    } else {\n      setSelectedSegments(newValue);\n    }\n  };\n\n  if (loading) {\n    return (\n      <Box display=\"flex\" alignItems=\"center\" gap={2} mb={3}>\n        <CircularProgress size={20} />\n        <span>Loading filters...</span>\n      </Box>\n    );\n  }\n\n  return (\n    <Box display=\"flex\" gap={3} mb={3} flexWrap=\"wrap\">\n      <FormControl size=\"small\" sx={{ minWidth: 200 }}>\n        <InputLabel>Region</InputLabel>\n        <Select\n          multiple\n          value={selectedRegions}\n          onChange={handleRegionChange}\n          input={<OutlinedInput label=\"Region\" />}\n          disabled={disabled}\n          renderValue={(selected) => \n            selected.length === 0 ? 'All Regions' : (\n              <Box sx={{ display: 'flex', flexWrap: 'wrap', gap: 0.5 }}>\n                {selected.map((value) => (\n                  <Chip key={value} label={value} size=\"small\" />\n                ))}\n              </Box>\n            )\n          }\n        >\n          <MenuItem \n            key=\"all-regions\" \n            value=\"\"\n            sx={{ fontStyle: 'italic' }}\n          >\n            All Regions\n          </MenuItem>\n          {availableRegions.map((region) => (\n            <MenuItem key={region} value={region}>\n              {region}\n            </MenuItem>\n          ))}\n        </Select>\n      </FormControl>\n\n      <FormControl size=\"small\" sx={{ minWidth: 200 }}>\n        <InputLabel>Customer Segment</InputLabel>\n        <Select\n          multiple\n          value={selectedSegments}\n          onChange={handleSegmentChange}\n          input={<OutlinedInput label=\"Customer Segment\" />}\n          disabled={disabled}\n          renderValue={(selected) => \n            selected.length === 0 ? 'All Segments' : (\n              <Box sx={{ display: 'flex', flexWrap: 'wrap', gap: 0.5 }}>\n                {selected.map((value) => (\n                  <Chip key={value} label={value} size=\"small\" />\n                ))}\n              </Box>\n            )\n          }\n        >\n          <MenuItem \n            key=\"all-segments\" \n            value=\"\"\n            sx={{ fontStyle: 'italic' }}\n          >\n            All Segments\n          </MenuItem>\n          {availableSegments.map((segment) => (\n            <MenuItem key={segment} value={segment}>\n              {segment}\n            </MenuItem>\n          ))}\n        </Select>\n      </FormControl>\n    </Box>\n  );\n};\n\nexport default FilterBar;\n"})}),"\n",(0,a.jsx)(n.h3,{id:"step-3-update-dashboard-to-include-filters",children:"Step 3: Update Dashboard to Include Filters"}),"\n",(0,a.jsx)(n.p,{children:"Update the Dashboard component to include the filter bar and pass filter state to child components:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-typescript",metastring:'title="src/components/Dashboard.tsx" {1,8,10-12,15-20,24-38,46}',children:'import React, { useState } from \'react\';\nimport {\n  Container,\n  Grid,\n  Typography,\n  Paper,\n  Box,\n  Button,\n} from \'@mui/material\';\nimport { Refresh as RefreshIcon } from \'@mui/icons-material\';\nimport FilterBar from \'./FilterBar\';\nimport { CubeFilter } from \'../types/cube\';\n\nconst Dashboard: React.FC = () => {\n  const [filters, setFilters] = useState<CubeFilter[]>([]);\n  const [loading, setLoading] = useState(false);\n\n  const handleFiltersChange = (newFilters: CubeFilter[]) => {\n    setFilters(newFilters);\n  };\n\n  return (\n    <Container maxWidth="lg" sx={{ mt: 4, mb: 4 }}>\n      <Box display="flex" justifyContent="space-between" alignItems="center" mb={3}>\n        <Typography variant="h4" component="h1">\n          TPC-H Analytics Dashboard\n        </Typography>\n        <Button\n          variant="outlined"\n          startIcon={<RefreshIcon />}\n          disabled={loading}\n        >\n          Refresh\n        </Button>\n      </Box>\n\n      {/* Global Filters */}\n      <FilterBar onFiltersChange={handleFiltersChange} disabled={loading} />\n\n      <Grid container spacing={3}>\n        {/* KPI Cards Row */}\n        <Grid item xs={12}>\n          <Paper sx={{ p: 3, textAlign: \'center\', minHeight: 120 }}>\n            <Typography variant="h6" gutterBottom>Key Performance Indicators</Typography>\n            <Typography color="text.secondary">\n              KPI cards will be added in Part 5 (Filters active: {filters.length})\n            </Typography>\n          </Paper>\n        </Grid>\n\n        {/* Charts Row */}\n        <Grid item xs={12} md={8}>\n          <Paper sx={{ p: 3, height: 400 }}>\n            <Typography variant="h6" gutterBottom>Revenue Trend</Typography>\n            <Box \n              display="flex" \n              alignItems="center" \n              justifyContent="center" \n              height="90%"\n            >\n              <Typography color="text.secondary">\n                Revenue chart will be added in Part 6\n              </Typography>\n            </Box>\n          </Paper>\n        </Grid>\n        \n        <Grid item xs={12} md={4}>\n          <Paper sx={{ p: 3, height: 400 }}>\n            <Typography variant="h6" gutterBottom>Customer Segments</Typography>\n            <Box \n              display="flex" \n              alignItems="center" \n              justifyContent="center" \n              height="90%"\n            >\n              <Typography color="text.secondary">\n                Pie chart will be added in Part 6\n              </Typography>\n            </Box>\n          </Paper>\n        </Grid>\n      </Grid>\n    </Container>\n  );\n};\n\nexport default Dashboard;\n'})}),"\n",(0,a.jsx)(n.p,{children:"Now test your filters:"}),"\n",(0,a.jsxs)(n.ol,{children:["\n",(0,a.jsx)(n.li,{children:"Login to the dashboard"}),"\n",(0,a.jsx)(n.li,{children:"You should see filter dropdowns loading with real data from Cube"}),"\n",(0,a.jsx)(n.li,{children:"Select some regions/segments and watch the filter count update"}),"\n",(0,a.jsx)(n.li,{children:"The filters are now ready to be consumed by chart components!"}),"\n"]}),"\n",(0,a.jsx)(n.hr,{}),"\n",(0,a.jsx)(n.h2,{id:"part-5-dashboard-structure--kpi-cards",children:"Part 5: Dashboard Structure & KPI Cards"}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.em,{children:"Goal: Create the main dashboard with tabs and KPIs"})}),"\n",(0,a.jsx)(n.h3,{id:"step-1-create-kpi-cards-component",children:"Step 1: Create KPI Cards Component"}),"\n",(0,a.jsx)(n.p,{children:"This component displays three essential business metrics: Order Count, Total Revenue, and Average Order Value. It demonstrates proper data formatting and loading states.  Notice the single query pulling back 3 measures with the same filter, then using the result to populate the 3 different KPI cards."}),"\n",(0,a.jsxs)(n.p,{children:["Create ",(0,a.jsx)(n.code,{children:"src/components/KPICards.tsx"}),":"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-typescript",metastring:'title="src/components/KPICards.tsx"',children:"import React, { useEffect, useState } from 'react';\nimport { Grid, Card, CardContent, Typography, Box, Skeleton } from '@mui/material';\nimport { \n  TrendingUp, \n  ShoppingCart, \n  AttachMoney\n} from '@mui/icons-material';\nimport { cubeApi } from '../services/cubeApi';\nimport { CubeFilter } from '../types/cube';\n\ninterface KPIData {\n  totalRevenue: number;\n  orderCount: number;\n  avgOrderValue: number;\n}\n\ninterface KPICardsProps {\n  filters?: CubeFilter[];\n}\n\nconst KPICards: React.FC<KPICardsProps> = ({ filters = [] }) => {\n  const [data, setData] = useState<KPIData | null>(null);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState<string | null>(null);\n\n  useEffect(() => {\n    fetchKPIs();\n  }, [filters]);\n\n  const fetchKPIs = async () => {\n    try {\n      setLoading(true);\n      const response = await cubeApi.query({\n        measures: [\n          'customer_behavior.count',\n          'customer_behavior.total_revenue',\n          'customer_behavior.average_order_value'\n        ],\n        timeDimensions: [{\n          dimension: 'customer_behavior.order_date',\n          dateRange: 'last 12 months'\n        }],\n        filters\n      });\n\n      // Extract data from the single result row\n      // Cube automatically rolls up the data when no granularity is specified\n      const resultData = response.data[0] || {};\n      \n      setData({\n        orderCount: parseInt(String(resultData['customer_behavior.count'] || '0')),\n        totalRevenue: parseFloat(String(resultData['customer_behavior.total_revenue'] || '0')),\n        avgOrderValue: parseFloat(String(resultData['customer_behavior.average_order_value'] || '0'))\n      });\n    } catch (err) {\n      setError('Failed to load KPIs');\n      console.error('Error fetching KPIs:', err);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const formatCurrency = (value: number) => {\n    return new Intl.NumberFormat('en-US', {\n      style: 'currency',\n      currency: 'USD',\n      minimumFractionDigits: 0,\n      maximumFractionDigits: 0,\n    }).format(value);\n  };\n\n  const formatNumber = (value: number) => {\n    return new Intl.NumberFormat('en-US').format(value);\n  };\n\n  const kpiCards = [\n    {\n      title: 'Order Count (LTM)',\n      value: data ? formatNumber(data.orderCount) : '-',\n      icon: <ShoppingCart />,\n      color: '#2563eb', // Blue\n    },\n    {\n      title: 'Revenue (LTM)',\n      value: data ? formatCurrency(data.totalRevenue) : '-',\n      icon: <AttachMoney />,\n      color: '#16a34a', // Green\n    },\n    {\n      title: 'Avg Order Value (LTM)',\n      value: data ? formatCurrency(data.avgOrderValue) : '-',\n      icon: <TrendingUp />,\n      color: '#9333ea', // Purple\n    },\n  ];\n\n  if (error) {\n    return (\n      <Box sx={{ p: 3, textAlign: 'center' }}>\n        <Typography color=\"error\">{error}</Typography>\n      </Box>\n    );\n  }\n\n  return (\n    <Grid container spacing={3}>\n      {kpiCards.map((kpi, index) => (\n        <Grid item xs={12} sm={6} md={4} key={index}>\n          <Card elevation={2}>\n            <CardContent>\n              <Box display=\"flex\" alignItems=\"center\" mb={2}>\n                <Box\n                  sx={{\n                    backgroundColor: `${kpi.color}20`,\n                    borderRadius: 2,\n                    p: 1.5,\n                    display: 'flex',\n                    alignItems: 'center',\n                    justifyContent: 'center',\n                    mr: 2,\n                  }}\n                >\n                  <Box sx={{ color: kpi.color }}>{kpi.icon}</Box>\n                </Box>\n                <Typography variant=\"body2\" color=\"text.secondary\">\n                  {kpi.title}\n                </Typography>\n              </Box>\n              {loading ? (\n                <Skeleton variant=\"text\" width=\"60%\" height={40} />\n              ) : (\n                <Typography variant=\"h4\" component=\"div\">\n                  {kpi.value}\n                </Typography>\n              )}\n            </CardContent>\n          </Card>\n        </Grid>\n      ))}\n    </Grid>\n  );\n};\n\nexport default KPICards;\n"})}),"\n",(0,a.jsx)(n.h3,{id:"step-2-add-tabs-to-dashboard",children:"Step 2: Add Tabs to Dashboard"}),"\n",(0,a.jsx)(n.p,{children:"Now let's enhance our existing Dashboard component to include tabs for different views."}),"\n",(0,a.jsxs)(n.p,{children:["Update ",(0,a.jsx)(n.code,{children:"src/components/Dashboard.tsx"}),":"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-typescript",metastring:'title="src/components/Dashboard.tsx" {9-10,13-15,17-50,56,70-137}',children:'import React, { useState } from \'react\';\nimport { \n  Container,\n  Grid,\n  Typography,\n  Paper,\n  Box,\n  Button,\n  Tab,\n  Tabs,\n} from \'@mui/material\';\nimport { Refresh as RefreshIcon } from \'@mui/icons-material\';\nimport FilterBar from \'./FilterBar\';\nimport KPICards from \'./KPICards\';\nimport { CubeFilter } from \'../types/cube\';\n\ninterface TabPanelProps {\n  children?: React.ReactNode;\n  index: number;\n  value: number;\n}\n\nfunction TabPanel(props: TabPanelProps) {\n  const { children, value, index, ...other } = props;\n\n  return (\n    <div\n      role="tabpanel"\n      hidden={value !== index}\n      id={`dashboard-tabpanel-${index}`}\n      aria-labelledby={`dashboard-tab-${index}`}\n      {...other}\n    >\n      {value === index && <Box sx={{ py: 3 }}>{children}</Box>}\n    </div>\n  );\n}\n\nconst Dashboard: React.FC = () => {\n  const [tabValue, setTabValue] = useState(0);\n  const [loading, setLoading] = useState(false);\n  const [filters, setFilters] = useState<CubeFilter[]>([]);\n\n  const handleTabChange = (_event: React.SyntheticEvent, newValue: number) => {\n    setTabValue(newValue);\n  };\n\n  const handleFiltersChange = (newFilters: CubeFilter[]) => {\n    setFilters(newFilters);\n  };\n\n  return (\n    <Container maxWidth="lg" sx={{ mt: 4, mb: 4 }}>\n      <Box display="flex" justifyContent="space-between" alignItems="center" mb={3}>\n        <Typography variant="h4" component="h1">\n          TPC-H Analytics Dashboard (LTM)\n        </Typography>\n        <Button\n          variant="outlined"\n          startIcon={<RefreshIcon />}\n          disabled={loading}\n        >\n          Refresh\n        </Button>\n      </Box>\n\n      {/* Global Filters */}\n      <FilterBar onFiltersChange={handleFiltersChange} disabled={loading} />\n\n      <Paper sx={{ width: \'100%\', mb: 3 }}>\n        <Tabs value={tabValue} onChange={handleTabChange} sx={{ borderBottom: 1, borderColor: \'divider\' }}>\n          <Tab label="Overview" />\n          <Tab label="Sales Analysis" />\n          <Tab label="Customer Insights" />\n        </Tabs>\n\n        <TabPanel value={tabValue} index={0}>\n          {/* KPI Cards */}\n          <Grid container spacing={3} sx={{ mb: 3 }}>\n            <Grid item xs={12}>\n              <KPICards filters={filters} />\n            </Grid>\n          </Grid>\n\n          {/* Main Charts */}\n          <Grid container spacing={3}>\n            <Grid item xs={12} md={8}>\n              <Paper sx={{ p: 3, height: 400 }}>\n                <Typography variant="h6" gutterBottom>Revenue Over Time</Typography>\n                <Box \n                  display="flex" \n                  alignItems="center" \n                  justifyContent="center" \n                  height="90%"\n                >\n                  <Typography color="text.secondary">\n                    Revenue chart will be added in Part 6\n                  </Typography>\n                </Box>\n              </Paper>\n            </Grid>\n            <Grid item xs={12} md={4}>\n              <Paper sx={{ p: 3, height: 400 }}>\n                <Typography variant="h6" gutterBottom>Revenue by Region (LTM)</Typography>\n                <Box \n                  display="flex" \n                  alignItems="center " \n                  justifyContent="center" \n                  height="90%"\n                >\n                  <Typography color="text.secondary">\n                    Region chart will be added in Part 6\n                  </Typography>\n                </Box>\n              </Paper>\n            </Grid>\n          </Grid>\n        </TabPanel>\n\n        <TabPanel value={tabValue} index={1}>\n          <Box textAlign="center" py={8}>\n            <Typography variant="h6" gutterBottom>Sales Analysis Dashboard</Typography>\n            <Typography color="text.secondary">\n              Sales analysis charts will be added in Part 7\n            </Typography>\n          </Box>\n        </TabPanel>\n\n        <TabPanel value={tabValue} index={2}>\n          <Box textAlign="center" py={8}>\n            <Typography variant="h6" gutterBottom>Customer Insights Dashboard</Typography>\n            <Typography color="text.secondary">\n              Customer insight charts will be added in Part 7\n            </Typography>\n          </Box>\n        </TabPanel>\n      </Paper>\n    </Container>\n  );\n};\n\nexport default Dashboard;\n'})}),"\n",(0,a.jsx)(n.h3,{id:"step-3-test-the-enhanced-dashboard",children:"Step 3: Test the Enhanced Dashboard"}),"\n",(0,a.jsx)(n.p,{children:"Now test your progress:"}),"\n",(0,a.jsxs)(n.ol,{children:["\n",(0,a.jsx)(n.li,{children:"Login and you should see the tabbed dashboard"}),"\n",(0,a.jsx)(n.li,{children:"KPI cards showing real data from Cube"}),"\n",(0,a.jsx)(n.li,{children:"Filter by regions/segments and watch KPIs update instantly"}),"\n",(0,a.jsx)(n.li,{children:"Switch between tabs (other tabs show placeholders for now)"}),"\n"]}),"\n",(0,a.jsx)(n.p,{children:"The dashboard structure is complete with working KPIs and filters!"}),"\n",(0,a.jsx)(n.hr,{}),"\n",(0,a.jsx)(n.h2,{id:"part-6-chart-components",children:"Part 6: Chart Components"}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.em,{children:"Goal: Build reusable chart components"})}),"\n",(0,a.jsx)(n.h3,{id:"step-1-add-more-api-methods",children:"Step 1: Add More API Methods"}),"\n",(0,a.jsx)(n.p,{children:"First, extend your Cube API service with methods for chart data:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-typescript",metastring:'title="src/services/cubeApi.ts" {24-57}',children:"  // Get customer segments for filter dropdown  \n  async getCustomerSegments(): Promise<CubeQueryResponse> {\n    return this.query({\n      dimensions: ['customer_behavior.customers_segment']\n    });\n  }\n\n  // Main dashboard queries optimized for pre-aggregations\n  async getKPIs(filters: any[] = []): Promise<CubeQueryResponse> {\n    return this.query({\n      measures: [\n        'customer_behavior.count',\n        'customer_behavior.total_revenue', \n        'customer_behavior.average_order_value'\n      ],\n      timeDimensions: [{\n        dimension: 'customer_behavior.order_date',\n        dateRange: 'last 12 months'\n      }],\n      filters\n    });\n  }\n\n  async getSalesOverTime(filters: any[] = [], dateRange = 'last 12 months'): Promise<CubeQueryResponse> {\n    // Use customer_behavior view for consistency with filters\n    return this.query({\n      measures: ['customer_behavior.total_revenue'],\n      timeDimensions: [{\n        dimension: 'customer_behavior.order_date',\n        granularity: 'month',\n        dateRange\n      }],\n      filters\n    });\n  }\n\n  async getSalesByRegion(filters: any[] = []): Promise<CubeQueryResponse> {\n    // Use customer_behavior view to avoid join loops when filters are applied\n    return this.query({\n      measures: ['customer_behavior.total_revenue'],\n      dimensions: ['customer_behavior.region'],\n      timeDimensions: [{\n        dimension: 'customer_behavior.order_date',\n        granularity: 'month',\n        dateRange: 'last 12 months'\n      }],\n      filters\n    });\n  }\n\n  async getCustomerSegmentRevenue(filters: any[] = []): Promise<CubeQueryResponse> {\n    return this.query({\n      measures: ['customer_behavior.total_revenue'],\n      dimensions: ['customer_behavior.customers_segment'],\n      filters\n    });\n  }\n}\n\n// Export singleton instance\nexport const cubeApi = new CubeApiService();\nexport default cubeApi;\n"})}),"\n",(0,a.jsx)(n.h3,{id:"step-2-create-reusable-chart-components",children:"Step 2: Create Reusable Chart Components"}),"\n",(0,a.jsx)(n.p,{children:"Create a flexible SalesChart component that can render both line and bar charts:"}),"\n",(0,a.jsxs)(n.p,{children:["Create ",(0,a.jsx)(n.code,{children:"src/components/SalesChart.tsx"}),":"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-typescript",metastring:'title="src/components/SalesChart.tsx"',children:"import React from 'react';\nimport {\n  Chart as ChartJS,\n  CategoryScale,\n  LinearScale,\n  PointElement,\n  LineElement,\n  Title,\n  Tooltip,\n  Legend,\n  BarElement,\n} from 'chart.js';\nimport { Line, Bar } from 'react-chartjs-2';\nimport { Card, CardContent, Typography, Box, Skeleton } from '@mui/material';\nimport { ChartData } from '../types/cube';\n\n// Register Chart.js components\nChartJS.register(\n  CategoryScale,\n  LinearScale,\n  PointElement,\n  LineElement,\n  BarElement,\n  Title,\n  Tooltip,\n  Legend\n);\n\ninterface SalesChartProps {\n  title: string;\n  data: ChartData | null;\n  type?: 'line' | 'bar';\n  height?: number;\n  isLoading?: boolean;\n}\n\nconst SalesChart: React.FC<SalesChartProps> = ({ \n  title, \n  data, \n  type = 'line', \n  height = 400,\n  isLoading = false \n}) => {\n  const options = {\n    responsive: true,\n    maintainAspectRatio: false,\n    plugins: {\n      legend: {\n        position: 'top' as const,\n      },\n      title: {\n        display: false,\n      },\n      tooltip: {\n        callbacks: {\n          label: (context: any) => {\n            const value = context.parsed.y;\n            \n            // Format currency values\n            if (context.dataset.label?.toLowerCase().includes('sales') || \n                context.dataset.label?.toLowerCase().includes('revenue')) {\n              return `${context.dataset.label}: ${new Intl.NumberFormat('en-US', {\n                style: 'currency',\n                currency: 'USD',\n                minimumFractionDigits: 0,\n                maximumFractionDigits: 0\n              }).format(value)}`;\n            }\n            \n            // Format percentage values\n            if (context.dataset.label?.toLowerCase().includes('rate') || \n                context.dataset.label?.toLowerCase().includes('percent')) {\n              return `${context.dataset.label}: ${(value * 100).toFixed(1)}%`;\n            }\n            \n            // Default number formatting\n            return `${context.dataset.label}: ${new Intl.NumberFormat('en-US').format(value)}`;\n          }\n        }\n      }\n    },\n    scales: {\n      y: {\n        beginAtZero: true,\n        ticks: {\n          callback: function(value: any) {\n            // Format Y-axis labels for currency\n            if (title.toLowerCase().includes('sales') || \n                title.toLowerCase().includes('revenue')) {\n              return new Intl.NumberFormat('en-US', {\n                style: 'currency',\n                currency: 'USD',\n                notation: 'compact',\n                maximumFractionDigits: 1\n              }).format(value);\n            }\n            \n            // Format Y-axis labels for large numbers\n            return new Intl.NumberFormat('en-US', {\n              notation: 'compact',\n              maximumFractionDigits: 1\n            }).format(value);\n          }\n        }\n      }\n    }\n  };\n\n  const chartColors = {\n    primary: '#1976d2',\n    secondary: '#dc004e',\n    success: '#388e3c',\n    warning: '#f57c00',\n    info: '#0288d1',\n    gradient: 'rgba(25, 118, 210, 0.1)'\n  };\n\n  const enhancedData = data ? {\n    ...data,\n    datasets: data.datasets.map((dataset, index) => ({\n      ...dataset,\n      backgroundColor: dataset.backgroundColor || \n        (type === 'line' ? chartColors.gradient : \n         Array.isArray(dataset.data) \n           ? dataset.data.map((_, i) => \n               Object.values(chartColors)[i % Object.values(chartColors).length])\n           : chartColors.primary),\n      borderColor: dataset.borderColor || chartColors.primary,\n      borderWidth: dataset.borderWidth || (type === 'line' ? 2 : 1),\n      fill: type === 'line' ? true : false,\n      tension: type === 'line' ? 0.4 : undefined,\n    }))\n  } : null;\n\n  if (isLoading) {\n    return (\n      <Card sx={{ height: '100%' }}>\n        <CardContent>\n          <Typography variant=\"h6\" gutterBottom>\n            {title}\n          </Typography>\n          <Box height={height}>\n            <Skeleton variant=\"rectangular\" width=\"100%\" height=\"100%\" />\n          </Box>\n        </CardContent>\n      </Card>\n    );\n  }\n\n  if (!data || !data.datasets.length) {\n    return (\n      <Card sx={{ height: '100%' }}>\n        <CardContent>\n          <Typography variant=\"h6\" gutterBottom>\n            {title}\n          </Typography>\n          <Box \n            height={height} \n            display=\"flex\" \n            alignItems=\"center\" \n            justifyContent=\"center\"\n            bgcolor=\"grey.50\"\n            borderRadius={1}\n          >\n            <Typography variant=\"body2\" color=\"text.secondary\">\n              No data available\n            </Typography>\n          </Box>\n        </CardContent>\n      </Card>\n    );\n  }\n\n  return (\n    <Card sx={{ height: '100%' }}>\n      <CardContent>\n        <Typography variant=\"h6\" gutterBottom>\n          {title}\n        </Typography>\n        <Box height={height}>\n          {type === 'line' ? (\n            <Line data={enhancedData!} options={options} />\n          ) : (\n            <Bar data={enhancedData!} options={options} />\n          )}\n        </Box>\n      </CardContent>\n    </Card>\n  );\n};\n\nexport default SalesChart;\n"})}),"\n",(0,a.jsx)(n.h3,{id:"step-3-create-region-chart-component-doughnut",children:"Step 3: Create Region Chart Component (Doughnut)"}),"\n",(0,a.jsx)(n.p,{children:"Create a specialized chart for regional data visualization:"}),"\n",(0,a.jsxs)(n.p,{children:["Create ",(0,a.jsx)(n.code,{children:"src/components/RegionChart.tsx"}),":"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-typescript",metastring:'title="src/components/RegionChart.tsx"',children:"import React from 'react';\nimport {\n  Chart as ChartJS,\n  CategoryScale,\n  LinearScale,\n  ArcElement,\n  Title,\n  Tooltip,\n  Legend,\n} from 'chart.js';\nimport { Doughnut } from 'react-chartjs-2';\nimport { Card, CardContent, Typography, Box, Skeleton } from '@mui/material';\nimport { ChartData } from '../types/cube';\n\n// Register Chart.js components\nChartJS.register(\n  CategoryScale,\n  LinearScale,\n  ArcElement,\n  Title,\n  Tooltip,\n  Legend\n);\n\ninterface RegionChartProps {\n  title: string;\n  data: ChartData | null;\n  height?: number;\n  isLoading?: boolean;\n}\n\nconst RegionChart: React.FC<RegionChartProps> = ({ \n  title, \n  data, \n  height = 400,\n  isLoading = false \n}) => {\n  const options = {\n    responsive: true,\n    maintainAspectRatio: false,\n    plugins: {\n      legend: {\n        position: 'right' as const,\n        labels: {\n          boxWidth: 15,\n          padding: 15,\n        }\n      },\n      tooltip: {\n        callbacks: {\n          label: (context: any) => {\n            const value = context.parsed;\n            const total = context.dataset.data.reduce((sum: number, val: number) => sum + val, 0);\n            const percentage = ((value / total) * 100).toFixed(1);\n            \n            // Format currency values\n            const formattedValue = new Intl.NumberFormat('en-US', {\n              style: 'currency',\n              currency: 'USD',\n              minimumFractionDigits: 0,\n              maximumFractionDigits: 0\n            }).format(value);\n            \n            return `${context.label}: ${formattedValue} (${percentage}%)`;\n          }\n        }\n      }\n    },\n    cutout: '50%',\n  };\n\n  const regionColors = [\n    '#FF6384', // Pink/Red\n    '#36A2EB', // Blue\n    '#FFCE56', // Yellow\n    '#4BC0C0', // Teal\n    '#9966FF', // Purple\n    '#FF9F40', // Orange\n    '#FF6B6B', // Light Red\n    '#4ECDC4', // Light Teal\n  ];\n\n  const enhancedData = data ? {\n    ...data,\n    datasets: data.datasets.map(dataset => ({\n      ...dataset,\n      backgroundColor: regionColors.slice(0, data.labels.length),\n      borderColor: '#ffffff',\n      borderWidth: 2,\n      hoverBorderWidth: 3,\n    }))\n  } : null;\n\n  if (isLoading) {\n    return (\n      <Card sx={{ height: '100%' }}>\n        <CardContent>\n          <Typography variant=\"h6\" gutterBottom>\n            {title}\n          </Typography>\n          <Box height={height}>\n            <Skeleton variant=\"circular\" width=\"60%\" height=\"60%\" sx={{ mx: 'auto' }} />\n          </Box>\n        </CardContent>\n      </Card>\n    );\n  }\n\n  if (!data || !data.datasets.length) {\n    return (\n      <Card sx={{ height: '100%' }}>\n        <CardContent>\n          <Typography variant=\"h6\" gutterBottom>\n            {title}\n          </Typography>\n          <Box \n            height={height} \n            display=\"flex\" \n            alignItems=\"center\" \n            justifyContent=\"center\"\n            bgcolor=\"grey.50\"\n            borderRadius={1}\n          >\n            <Typography variant=\"body2\" color=\"text.secondary\">\n              No data available\n            </Typography>\n          </Box>\n        </CardContent>\n      </Card>\n    );\n  }\n\n  return (\n    <Card sx={{ height: '100%' }}>\n      <CardContent>\n        <Typography variant=\"h6\" gutterBottom>\n          {title}\n        </Typography>\n        <Box height={height} display=\"flex\" alignItems=\"center\" justifyContent=\"center\">\n          <Doughnut data={enhancedData!} options={options} />\n        </Box>\n      </CardContent>\n    </Card>\n  );\n};\n\nexport default RegionChart;\n"})}),"\n",(0,a.jsx)(n.h3,{id:"step-4-update-dashboard-with-real-charts",children:"Step 4: Update Dashboard with Real Charts"}),"\n",(0,a.jsx)(n.p,{children:"Now we'll create a comprehensive dashboard component that loads all data and renders the charts.  Update your Dashboard.tsx file with these sweeping changes:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-typescript",metastring:'title="src/components/Dashboard.tsx" ',children:"import React, { useState, useEffect, useRef } from 'react';\nimport {\n  Container,\n  Grid,\n  Typography,\n  Alert,\n  Box,\n  Paper,\n  Tab,\n  Tabs,\n  Button,\n} from '@mui/material';\nimport { Refresh as RefreshIcon } from '@mui/icons-material';\nimport cubeApi from '../services/cubeApi';\nimport FilterBar from './FilterBar';\nimport KPICards from './KPICards';\nimport SalesChart from './SalesChart';\nimport RegionChart from './RegionChart';\nimport { CubeQueryResponse, CubeFilter, ChartData } from '../types/cube';\n\ninterface TabPanelProps {\n  children?: React.ReactNode;\n  index: number;\n  value: number;\n}\n\nfunction TabPanel(props: TabPanelProps) {\n  const { children, value, index, ...other } = props;\n\n  return (\n    <div\n      role=\"tabpanel\"\n      hidden={value !== index}\n      id={`dashboard-tabpanel-${index}`}\n      aria-labelledby={`dashboard-tab-${index}`}\n      {...other}\n    >\n      {value === index && <Box sx={{ py: 3 }}>{children}</Box>}\n    </div>\n  );\n}\n\nconst Dashboard: React.FC = () => {\n  const [tabValue, setTabValue] = useState(0);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState<string | null>(null);\n  const [filters, setFilters] = useState<CubeFilter[]>([]);\n  \n  // State for different data sets\n  const [salesOverTime, setSalesOverTime] = useState<ChartData | null>(null);\n  const [salesByRegion, setSalesByRegion] = useState<ChartData | null>(null);\n  const [customerSegments, setCustomerSegments] = useState<ChartData | null>(null);\n  \n  // Track if we're already loading to prevent duplicate requests\n  const loadingRef = useRef(false);\n\n  const loadDashboardData = async () => {\n    // Prevent multiple simultaneous requests\n    if (loadingRef.current) {\n      console.log('\ud83d\udeab Skipping duplicate request - already loading');\n      return;\n    }\n    if (!cubeApi.isConfigured()) {\n      setError('Please configure your Cube API endpoint and token in the .env file.');\n      setLoading(false);\n      return;\n    }\n\n    loadingRef.current = true;\n    setLoading(true);\n    setError(null);\n\n    try {\n      console.log('\ud83d\udcca Loading dashboard data with filters:', filters);\n\n      // Load all data in parallel\n      const [\n        salesOverTimeResponse,\n        salesByRegionResponse,\n        customerSegmentsResponse,\n      ] = await Promise.all([\n        cubeApi.getSalesOverTime(filters),\n        cubeApi.getSalesByRegion(filters),\n        cubeApi.getCustomerSegmentRevenue(filters),\n      ]);\n\n      console.log('\u2705 All queries successful!');\n\n      // Process all data\n      setSalesOverTime(processSalesOverTimeData(salesOverTimeResponse));\n      setSalesByRegion(processSalesByRegionData(salesByRegionResponse));\n      setCustomerSegments(processCustomerSegmentsData(customerSegmentsResponse));\n\n    } catch (err) {\n      console.error('Dashboard load error:', err);\n      setError(err instanceof Error ? err.message : 'Failed to load dashboard data');\n    } finally {\n      loadingRef.current = false;\n      setLoading(false);\n    }\n  };\n\n  const processSalesOverTimeData = (response: CubeQueryResponse): ChartData => {\n    if (!response.data || !response.data.length) {\n      return {\n        labels: [],\n        datasets: [{\n          label: 'Revenue',\n          data: [],\n          borderColor: '#1976d2',\n          backgroundColor: 'rgba(25, 118, 210, 0.1)',\n          borderWidth: 2,\n        }]\n      };\n    }\n\n    const labels = response.data.map(row => {\n      const dateStr = row['customer_behavior.order_date.month'] as string;\n      return new Date(dateStr).toLocaleDateString('en-US', { month: 'short', year: 'numeric' });\n    });\n    \n    const data = response.data.map(row => \n      parseFloat(String(row['customer_behavior.total_revenue'])) || 0\n    );\n\n    return {\n      labels,\n      datasets: [{\n        label: 'Revenue',\n        data,\n        borderColor: '#1976d2',\n        backgroundColor: 'rgba(25, 118, 210, 0.1)',\n        borderWidth: 2,\n      }]\n    };\n  };\n\n  const processSalesByRegionData = (response: CubeQueryResponse): ChartData => {\n    if (!response.data || !response.data.length) {\n      return {\n        labels: [],\n        datasets: [{\n          label: 'Revenue by Region (LTM)',\n          data: [],\n          backgroundColor: ['#FF6384', '#36A2EB', '#FFCE56', '#4BC0C0', '#9966FF'],\n        }]\n      };\n    }\n\n    // Group by region and sum up LTM data\n    const regionTotals: { [key: string]: number } = {};\n    \n    response.data.forEach(row => {\n      const region = row['customer_behavior.region'] as string;\n      const amount = parseFloat(String(row['customer_behavior.total_revenue'])) || 0;\n      \n      if (regionTotals[region]) {\n        regionTotals[region] += amount;\n      } else {\n        regionTotals[region] = amount;\n      }\n    });\n\n    const labels = Object.keys(regionTotals);\n    const data = Object.values(regionTotals);\n\n    return {\n      labels,\n      datasets: [{\n        label: 'Revenue by Region (LTM)',\n        data,\n        backgroundColor: ['#FF6384', '#36A2EB', '#FFCE56', '#4BC0C0', '#9966FF'],\n      }]\n    };\n  };\n\n  const processCustomerSegmentsData = (response: CubeQueryResponse): ChartData => {\n    if (!response.data || !response.data.length) {\n      return {\n        labels: [],\n        datasets: [{\n          label: 'Revenue by Segment',\n          data: [],\n          backgroundColor: ['#FF6384', '#36A2EB', '#FFCE56', '#4BC0C0', '#9966FF'],\n        }]\n      };\n    }\n\n    const labels = response.data.map(row => row['customer_behavior.customers_segment'] as string);\n    const data = response.data.map(row => \n      parseFloat(String(row['customer_behavior.total_revenue'])) || 0\n    );\n\n    return {\n      labels,\n      datasets: [{\n        label: 'Revenue by Segment',\n        data,\n        backgroundColor: ['#FF6384', '#36A2EB', '#FFCE56', '#4BC0C0', '#9966FF'],\n      }]\n    };\n  };\n\n  useEffect(() => {\n    console.log('\ud83d\udd04 useEffect triggered, filters:', filters);\n    loadDashboardData();\n  }, [filters]); // Only depend on filters, not the function itself\n\n  const handleTabChange = (_event: React.SyntheticEvent, newValue: number) => {\n    setTabValue(newValue);\n  };\n\n  const handleFiltersChange = (newFilters: CubeFilter[]) => {\n    setFilters(newFilters);\n  };\n\n  if (error) {\n    return (\n      <Container maxWidth=\"lg\" sx={{ mt: 4, mb: 4 }}>\n        <Alert severity=\"error\" sx={{ mb: 2 }}>\n          <Typography variant=\"h6\" gutterBottom>\n            Dashboard Error\n          </Typography>\n          {error}\n          <br /><br />\n          <Typography variant=\"body2\">\n            To configure the dashboard:\n            <br />\n            1. Check your .env file in the project root\n            <br />\n            2. Ensure REACT_APP_CUBE_API_URL and REACT_APP_CUBE_API_TOKEN are set\n            <br />\n            3. Restart the development server: npm start\n          </Typography>\n        </Alert>\n      </Container>\n    );\n  }\n\n  return (\n    <Container maxWidth=\"lg\" sx={{ mt: 4, mb: 4 }}>\n      <Box display=\"flex\" justifyContent=\"space-between\" alignItems=\"center\" mb={3}>\n        <Typography variant=\"h4\" component=\"h1\">\n          TPC-H Analytics Dashboard (LTM)\n        </Typography>\n        <Button\n          variant=\"outlined\"\n          startIcon={<RefreshIcon />}\n          onClick={loadDashboardData}\n          disabled={loading}\n        >\n          Refresh\n        </Button>\n      </Box>\n\n      {/* Global Filters */}\n      <FilterBar onFiltersChange={handleFiltersChange} disabled={loading} />\n\n      <Paper sx={{ width: '100%', mb: 3 }}>\n        <Tabs value={tabValue} onChange={handleTabChange} sx={{ borderBottom: 1, borderColor: 'divider' }}>\n          <Tab label=\"Overview\" />\n          <Tab label=\"Sales Analysis\" />\n          <Tab label=\"Customer Insights\" />\n        </Tabs>\n\n        <TabPanel value={tabValue} index={0}>\n          {/* KPI Cards */}\n          <Grid container spacing={3} sx={{ mb: 3 }}>\n            <Grid item xs={12}>\n              <KPICards filters={filters} />\n            </Grid>\n          </Grid>\n\n          {/* Main Charts */}\n          <Grid container spacing={3}>\n            <Grid item xs={12} md={8}>\n              <SalesChart\n                title=\"Revenue Over Time\"\n                data={salesOverTime}\n                type=\"line\"\n                isLoading={loading}\n              />\n            </Grid>\n            <Grid item xs={12} md={4}>\n              <RegionChart\n                title=\"Revenue by Region (LTM)\"\n                data={salesByRegion}\n                isLoading={loading}\n              />\n            </Grid>\n          </Grid>\n        </TabPanel>\n\n        <TabPanel value={tabValue} index={1}>\n          <Box textAlign=\"center\" py={8}>\n            <Typography variant=\"h6\" gutterBottom>Sales Analysis Dashboard</Typography>\n            <Typography color=\"text.secondary\">\n              Sales analysis charts will be added in Part 7\n            </Typography>\n          </Box>\n        </TabPanel>\n\n        <TabPanel value={tabValue} index={2}>\n          <Grid container spacing={3}>\n            <Grid item xs={12}>\n              <RegionChart\n                title=\"Customer Segments\"\n                data={customerSegments}\n                isLoading={loading}\n              />\n            </Grid>\n          </Grid>\n        </TabPanel>\n      </Paper>\n    </Container>\n  );\n};\n\nexport default Dashboard;\n"})}),"\n",(0,a.jsx)(n.p,{children:"Now test your charts:"}),"\n",(0,a.jsxs)(n.ol,{children:["\n",(0,a.jsx)(n.li,{children:"Login and navigate to the Overview tab"}),"\n",(0,a.jsx)(n.li,{children:"You should see real charts with Cube data"}),"\n",(0,a.jsx)(n.li,{children:"Apply filters and watch all charts update"}),"\n",(0,a.jsx)(n.li,{children:"Try the Customer Insights tab to see the segment chart"}),"\n"]}),"\n",(0,a.jsx)(n.p,{children:"You now have working, interactive charts powered by Cube data!"}),"\n",(0,a.jsx)(n.hr,{}),"\n",(0,a.jsx)(n.h2,{id:"part-7-complete-dashboard-views",children:"Part 7: Complete Dashboard Views"}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.em,{children:"Goal: Finish all three dashboard tabs"})}),"\n",(0,a.jsx)(n.h3,{id:"step-1-add-remaining-api-methods",children:"Step 1: Add Remaining API Methods"}),"\n",(0,a.jsx)(n.p,{children:"Add the final API methods needed for the complete dashboard:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-typescript",metastring:'title="src/services/cubeApi.ts" {9-32}',children:"  async getCustomerSegmentRevenue(filters: any[] = []): Promise<CubeQueryResponse> {\n    return this.query({\n      measures: ['customer_behavior.total_revenue'],\n      dimensions: ['customer_behavior.customers_segment'],\n      filters\n    });\n  }\n\n  async getOrderSizeDistribution(filters: any[] = []): Promise<CubeQueryResponse> {\n    return this.query({\n      measures: ['customer_behavior.count', 'customer_behavior.total_revenue'],\n      dimensions: ['customer_behavior.order_size_category'],\n      filters\n    });\n  }\n\n  async getTopBrands(filters: any[] = [], limit = 10): Promise<CubeQueryResponse> {\n    return this.query({\n      measures: ['sales.total_sales_amount'],\n      dimensions: ['sales.parts_brand'],\n      filters,\n      limit\n    });\n  }\n\n  async getOrderStatusBreakdown(filters: any[] = []): Promise<CubeQueryResponse> {\n    return this.query({\n      measures: ['customer_behavior.count', 'customer_behavior.total_revenue'],\n      dimensions: ['customer_behavior.status'],\n      filters\n    });\n  }\n}\n\n// Export singleton instance\nexport const cubeApi = new CubeApiService();\nexport default cubeApi;\n"})}),"\n",(0,a.jsx)(n.h3,{id:"step-2-create-complete-dashboard-with-all-three-tabs",children:"Step 2: Create Complete Dashboard with All Three Tabs"}),"\n",(0,a.jsx)(n.p,{children:"Now let's create the complete dashboard with all three views populated:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-typescript",metastring:'title="src/components/Dashboard.tsx" {53-56,84-86,91-93,102-104,216-295,388-414,419,426-432}',children:"import React, { useState, useEffect, useRef } from 'react';\nimport {\n  Container,\n  Grid,\n  Typography,\n  Alert,\n  Box,\n  Paper,\n  Tab,\n  Tabs,\n  Button,\n} from '@mui/material';\nimport { Refresh as RefreshIcon } from '@mui/icons-material';\nimport cubeApi from '../services/cubeApi';\nimport FilterBar from './FilterBar';\nimport KPICards from './KPICards';\nimport SalesChart from './SalesChart';\nimport RegionChart from './RegionChart';\nimport { CubeQueryResponse, CubeFilter, ChartData } from '../types/cube';\n\ninterface TabPanelProps {\n  children?: React.ReactNode;\n  index: number;\n  value: number;\n}\n\nfunction TabPanel(props: TabPanelProps) {\n  const { children, value, index, ...other } = props;\n\n  return (\n    <div\n      role=\"tabpanel\"\n      hidden={value !== index}\n      id={`dashboard-tabpanel-${index}`}\n      aria-labelledby={`dashboard-tab-${index}`}\n      {...other}\n    >\n      {value === index && <Box sx={{ py: 3 }}>{children}</Box>}\n    </div>\n  );\n}\n\nconst Dashboard: React.FC = () => {\n  const [tabValue, setTabValue] = useState(0);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState<string | null>(null);\n  const [filters, setFilters] = useState<CubeFilter[]>([]);\n  \n  // State for different data sets\n  const [salesOverTime, setSalesOverTime] = useState<ChartData | null>(null);\n  const [salesByRegion, setSalesByRegion] = useState<ChartData | null>(null);\n  const [customerSegments, setCustomerSegments] = useState<ChartData | null>(null);\n  const [orderSizeDistribution, setOrderSizeDistribution] = useState<ChartData | null>(null);\n  const [topBrands, setTopBrands] = useState<ChartData | null>(null);\n  const [orderStatus, setOrderStatus] = useState<ChartData | null>(null);\n  \n  // Track if we're already loading to prevent duplicate requests\n  const loadingRef = useRef(false);\n\n  const loadDashboardData = async () => {\n    // Prevent multiple simultaneous requests\n    if (loadingRef.current) {\n      console.log('\ud83d\udeab Skipping duplicate request - already loading');\n      return;\n    }\n    if (!cubeApi.isConfigured()) {\n      setError('Please configure your Cube API endpoint and token in the .env file.');\n      setLoading(false);\n      return;\n    }\n\n    loadingRef.current = true;\n    setLoading(true);\n    setError(null);\n\n    try {\n      console.log('\ud83d\udcca Loading dashboard data with filters:', filters);\n\n      // Load all data in parallel\n      const [\n        salesOverTimeResponse,\n        salesByRegionResponse,\n        customerSegmentsResponse,\n        orderSizeResponse,\n        topBrandsResponse,\n        orderStatusResponse,\n      ] = await Promise.all([\n        cubeApi.getSalesOverTime(filters),\n        cubeApi.getSalesByRegion(filters),\n        cubeApi.getCustomerSegmentRevenue(filters),\n        cubeApi.getOrderSizeDistribution(filters),\n        cubeApi.getTopBrands(filters, 10),\n        cubeApi.getOrderStatusBreakdown(filters),\n      ]);\n\n      console.log('\u2705 All queries successful!');\n\n      // Process all data\n      setSalesOverTime(processSalesOverTimeData(salesOverTimeResponse));\n      setSalesByRegion(processSalesByRegionData(salesByRegionResponse));\n      setCustomerSegments(processCustomerSegmentsData(customerSegmentsResponse));\n      setOrderSizeDistribution(processOrderSizeData(orderSizeResponse));\n      setTopBrands(processTopBrandsData(topBrandsResponse));\n      setOrderStatus(processOrderStatusData(orderStatusResponse));\n\n    } catch (err) {\n      console.error('Dashboard load error:', err);\n      setError(err instanceof Error ? err.message : 'Failed to load dashboard data');\n    } finally {\n      loadingRef.current = false;\n      setLoading(false);\n    }\n  };\n\n  const processSalesOverTimeData = (response: CubeQueryResponse): ChartData => {\n    if (!response.data || !response.data.length) {\n      return {\n        labels: [],\n        datasets: [{\n          label: 'Revenue',\n          data: [],\n          borderColor: '#1976d2',\n          backgroundColor: 'rgba(25, 118, 210, 0.1)',\n          borderWidth: 2,\n        }]\n      };\n    }\n\n    const labels = response.data.map(row => {\n      const dateStr = row['customer_behavior.order_date.month'] as string;\n      return new Date(dateStr).toLocaleDateString('en-US', { month: 'short', year: 'numeric' });\n    });\n    \n    const data = response.data.map(row => \n      parseFloat(String(row['customer_behavior.total_revenue'])) || 0\n    );\n\n    return {\n      labels,\n      datasets: [{\n        label: 'Revenue',\n        data,\n        borderColor: '#1976d2',\n        backgroundColor: 'rgba(25, 118, 210, 0.1)',\n        borderWidth: 2,\n      }]\n    };\n  };\n\n  const processSalesByRegionData = (response: CubeQueryResponse): ChartData => {\n    if (!response.data || !response.data.length) {\n      return {\n        labels: [],\n        datasets: [{\n          label: 'Revenue by Region (LTM)',\n          data: [],\n          backgroundColor: ['#FF6384', '#36A2EB', '#FFCE56', '#4BC0C0', '#9966FF'],\n        }]\n      };\n    }\n\n    // Group by region and sum up LTM data\n    const regionTotals: { [key: string]: number } = {};\n    \n    response.data.forEach(row => {\n      const region = row['customer_behavior.region'] as string;\n      const amount = parseFloat(String(row['customer_behavior.total_revenue'])) || 0;\n      \n      if (regionTotals[region]) {\n        regionTotals[region] += amount;\n      } else {\n        regionTotals[region] = amount;\n      }\n    });\n\n    const labels = Object.keys(regionTotals);\n    const data = Object.values(regionTotals);\n\n    return {\n      labels,\n      datasets: [{\n        label: 'Revenue by Region (LTM)',\n        data,\n        backgroundColor: ['#FF6384', '#36A2EB', '#FFCE56', '#4BC0C0', '#9966FF'],\n      }]\n    };\n  };\n\n  const processCustomerSegmentsData = (response: CubeQueryResponse): ChartData => {\n    if (!response.data || !response.data.length) {\n      return {\n        labels: [],\n        datasets: [{\n          label: 'Revenue by Segment',\n          data: [],\n          backgroundColor: ['#FF6384', '#36A2EB', '#FFCE56', '#4BC0C0', '#9966FF'],\n        }]\n      };\n    }\n\n    const labels = response.data.map(row => row['customer_behavior.customers_segment'] as string);\n    const data = response.data.map(row => \n      parseFloat(String(row['customer_behavior.total_revenue'])) || 0\n    );\n\n    return {\n      labels,\n      datasets: [{\n        label: 'Revenue by Segment',\n        data,\n        backgroundColor: ['#FF6384', '#36A2EB', '#FFCE56', '#4BC0C0', '#9966FF'],\n      }]\n    };\n  };\n\n  const processOrderSizeData = (response: CubeQueryResponse): ChartData => {\n    if (!response.data || !response.data.length) {\n      return {\n        labels: [],\n        datasets: [{\n          label: 'Order Count',\n          data: [],\n          backgroundColor: '#36A2EB',\n        }]\n      };\n    }\n\n    const labels = response.data.map(row => row['customer_behavior.order_size_category'] as string);\n    const orderData = response.data.map(row => \n      parseFloat(String(row['customer_behavior.count'])) || 0\n    );\n\n    return {\n      labels,\n      datasets: [{\n        label: 'Order Count',\n        data: orderData,\n        backgroundColor: '#36A2EB',\n      }]\n    };\n  };\n\n  const processTopBrandsData = (response: CubeQueryResponse): ChartData => {\n    if (!response.data || !response.data.length) {\n      return {\n        labels: [],\n        datasets: [{\n          label: 'Revenue by Brand',\n          data: [],\n          backgroundColor: '#4BC0C0',\n        }]\n      };\n    }\n\n    const labels = response.data.map(row => row['sales.parts_brand'] as string);\n    const data = response.data.map(row => \n      parseFloat(row['sales.total_sales_amount'] as string) || 0\n    );\n\n    return {\n      labels,\n      datasets: [{\n        label: 'Revenue by Brand',\n        data,\n        backgroundColor: '#4BC0C0',\n      }]\n    };\n  };\n\n  const processOrderStatusData = (response: CubeQueryResponse): ChartData => {\n    if (!response.data || !response.data.length) {\n      return {\n        labels: [],\n        datasets: [{\n          label: 'Orders by Status',\n          data: [],\n          backgroundColor: ['#FF6384', '#36A2EB', '#FFCE56'],\n        }]\n      };\n    }\n\n    const labels = response.data.map(row => row['customer_behavior.status'] as string);\n    const data = response.data.map(row => \n      parseFloat(String(row['customer_behavior.count'])) || 0\n    );\n\n    return {\n      labels,\n      datasets: [{\n        label: 'Orders by Status',\n        data,\n        backgroundColor: ['#FF6384', '#36A2EB', '#FFCE56'],\n      }]\n    };\n  };\n\n  useEffect(() => {\n    console.log('\ud83d\udd04 useEffect triggered, filters:', filters);\n    loadDashboardData();\n  }, [filters]); // Only depend on filters, not the function itself\n\n  const handleTabChange = (_event: React.SyntheticEvent, newValue: number) => {\n    setTabValue(newValue);\n  };\n\n  const handleFiltersChange = (newFilters: CubeFilter[]) => {\n    setFilters(newFilters);\n  };\n\n  if (error) {\n    return (\n      <Container maxWidth=\"lg\" sx={{ mt: 4, mb: 4 }}>\n        <Alert severity=\"error\" sx={{ mb: 2 }}>\n          <Typography variant=\"h6\" gutterBottom>\n            Dashboard Error\n          </Typography>\n          {error}\n          <br /><br />\n          <Typography variant=\"body2\">\n            To configure the dashboard:\n            <br />\n            1. Check your .env file in the project root\n            <br />\n            2. Ensure REACT_APP_CUBE_API_URL and REACT_APP_CUBE_API_TOKEN are set\n            <br />\n            3. Restart the development server: npm start\n          </Typography>\n        </Alert>\n      </Container>\n    );\n  }\n\n  return (\n    <Container maxWidth=\"lg\" sx={{ mt: 4, mb: 4 }}>\n      <Box display=\"flex\" justifyContent=\"space-between\" alignItems=\"center\" mb={3}>\n        <Typography variant=\"h4\" component=\"h1\">\n          TPC-H Analytics Dashboard (LTM)\n        </Typography>\n        <Button\n          variant=\"outlined\"\n          startIcon={<RefreshIcon />}\n          onClick={loadDashboardData}\n          disabled={loading}\n        >\n          Refresh\n        </Button>\n      </Box>\n\n      {/* Global Filters */}\n      <FilterBar onFiltersChange={handleFiltersChange} disabled={loading} />\n\n      <Paper sx={{ width: '100%', mb: 3 }}>\n        <Tabs value={tabValue} onChange={handleTabChange} sx={{ borderBottom: 1, borderColor: 'divider' }}>\n          <Tab label=\"Overview\" />\n          <Tab label=\"Sales Analysis\" />\n          <Tab label=\"Customer Insights\" />\n        </Tabs>\n\n        <TabPanel value={tabValue} index={0}>\n          {/* KPI Cards */}\n          <Grid container spacing={3} sx={{ mb: 3 }}>\n            <Grid item xs={12}>\n              <KPICards filters={filters} />\n            </Grid>\n          </Grid>\n\n          {/* Main Charts */}\n          <Grid container spacing={3}>\n            <Grid item xs={12} md={8}>\n              <SalesChart\n                title=\"Revenue Over Time\"\n                data={salesOverTime}\n                type=\"line\"\n                isLoading={loading}\n              />\n            </Grid>\n            <Grid item xs={12} md={4}>\n              <RegionChart\n                title=\"Revenue by Region (LTM)\"\n                data={salesByRegion}\n                isLoading={loading}\n              />\n            </Grid>\n          </Grid>\n        </TabPanel>\n\n        <TabPanel value={tabValue} index={1}>\n          <Grid container spacing={3}>\n            <Grid item xs={12} md={6}>\n              <SalesChart\n                title=\"Revenue by Region\"\n                data={salesByRegion}\n                type=\"bar\"\n                isLoading={loading}\n              />\n            </Grid>\n            <Grid item xs={12} md={6}>\n              <SalesChart\n                title=\"Order Size Distribution\"\n                data={orderSizeDistribution}\n                type=\"bar\"\n                isLoading={loading}\n              />\n            </Grid>\n            <Grid item xs={12}>\n              <SalesChart\n                title=\"Top Brands by Revenue\"\n                data={topBrands}\n                type=\"bar\"\n                height={400}\n                isLoading={loading}\n              />\n            </Grid>\n          </Grid>\n        </TabPanel>\n\n        <TabPanel value={tabValue} index={2}>\n          <Grid container spacing={3}>\n            <Grid item xs={12} md={6}>\n              <RegionChart\n                title=\"Customer Segments\"\n                data={customerSegments}\n                isLoading={loading}\n              />\n            </Grid>\n            <Grid item xs={12} md={6}>\n              <RegionChart\n                title=\"Orders by Status\"\n                data={orderStatus}\n                isLoading={loading}\n              />\n            </Grid>\n          </Grid>\n        </TabPanel>\n      </Paper>\n    </Container>\n  );\n};\n\nexport default Dashboard;\n"})}),"\n",(0,a.jsx)(n.p,{children:"Now test your complete dashboard:"}),"\n",(0,a.jsxs)(n.ol,{children:["\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Overview Tab"}),": KPIs + Revenue trend + Regional breakdown"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Sales Analysis Tab"}),": Regional bars + Order sizes + Top brands"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Customer Insights Tab"}),": Customer segments + Order status"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Filtering"}),": All tabs respect the global filters"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Loading States"}),": Proper skeletons while data loads"]}),"\n"]}),"\n",(0,a.jsx)(n.p,{children:"You now have a complete, professional dashboard with three distinct views!"}),"\n",(0,a.jsx)(n.hr,{}),"\n",(0,a.jsx)(n.h2,{id:"part-8-polish--optimization",children:"Part 8: Polish & Optimization"}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.em,{children:"Goal: Add final touches and optimize performance"})}),"\n",(0,a.jsx)(n.h3,{id:"step-1-create-metricscard-component-for-better-kpis",children:"Step 1: Create MetricsCard Component for Better KPIs"}),"\n",(0,a.jsx)(n.p,{children:"Let's create a more professional metrics card component to update the basic KPI cards:"}),"\n",(0,a.jsxs)(n.p,{children:["Create ",(0,a.jsx)(n.code,{children:"src/components/MetricsCard.tsx"}),":"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-typescript",metastring:'title="src/components/MetricsCard.tsx"',children:"import React from 'react';\nimport {\n  Card,\n  CardContent,\n  Typography,\n  Box,\n  Skeleton,\n  Chip\n} from '@mui/material';\nimport { TrendingUp, TrendingDown } from '@mui/icons-material';\nimport { MetricCardData } from '../types/cube';\n\ninterface MetricsCardProps {\n  data: MetricCardData;\n}\n\nconst MetricsCard: React.FC<MetricsCardProps> = ({ data }) => {\n  const formatValue = (value: string | number, format?: string): string => {\n    if (typeof value === 'string') return value;\n    \n    if (format === 'currency') {\n      return new Intl.NumberFormat('en-US', {\n        style: 'currency',\n        currency: 'USD',\n        minimumFractionDigits: 0,\n        maximumFractionDigits: 0\n      }).format(value);\n    }\n    \n    if (format === 'percent') {\n      return `${(value * 100).toFixed(1)}%`;\n    }\n    \n    // Default number formatting\n    return new Intl.NumberFormat('en-US', {\n      minimumFractionDigits: 0,\n      maximumFractionDigits: 0\n    }).format(value);\n  };\n\n  const getTrendIcon = (change?: number): React.ReactElement | undefined => {\n    if (change === undefined) return undefined;\n    \n    if (change > 0) {\n      return <TrendingUp sx={{ color: 'success.main', fontSize: 16 }} />;\n    } else if (change < 0) {\n      return <TrendingDown sx={{ color: 'error.main', fontSize: 16 }} />;\n    }\n    return undefined;\n  };\n\n  const getTrendColor = (change?: number) => {\n    if (change === undefined) return 'default';\n    return change > 0 ? 'success' : change < 0 ? 'error' : 'default';\n  };\n\n  if (data.isLoading) {\n    return (\n      <Card sx={{ height: '100%' }}>\n        <CardContent>\n          <Skeleton variant=\"text\" width=\"60%\" height={24} />\n          <Skeleton variant=\"text\" width=\"40%\" height={40} sx={{ mt: 1 }} />\n          <Skeleton variant=\"text\" width=\"30%\" height={20} sx={{ mt: 1 }} />\n        </CardContent>\n      </Card>\n    );\n  }\n\n  return (\n    <Card sx={{ height: '100%', bgcolor: 'background.paper' }}>\n      <CardContent>\n        <Typography variant=\"subtitle2\" color=\"text.secondary\" gutterBottom>\n          {data.title}\n        </Typography>\n        \n        <Box display=\"flex\" alignItems=\"baseline\" gap={1} mb={1}>\n          <Typography variant=\"h4\" component=\"div\" color=\"text.primary\">\n            {formatValue(data.value, data.format)}\n          </Typography>\n        </Box>\n        \n        {data.change !== undefined && (\n          <Box display=\"flex\" alignItems=\"center\" gap={0.5}>\n            <Chip\n              icon={getTrendIcon(data.change)}\n              label={`${data.change > 0 ? '+' : ''}${data.change.toFixed(1)}%`}\n              size=\"small\"\n              color={getTrendColor(data.change) as 'default' | 'primary' | 'secondary' | 'error' | 'info' | 'success' | 'warning'}\n              variant=\"outlined\"\n            />\n            <Typography variant=\"caption\" color=\"text.secondary\">\n              vs last period\n            </Typography>\n          </Box>\n        )}\n      </CardContent>\n    </Card>\n  );\n};\n\nexport default MetricsCard;\n"})}),"\n",(0,a.jsx)(n.h3,{id:"step-2-update-kpicards-to-use-metricscard",children:"Step 2: Update KPICards to Use MetricsCard"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-typescript",metastring:'title="src/components/KPICards.tsx" ',children:"import React, { useEffect, useState } from 'react';\nimport { Grid, Box, Typography } from '@mui/material';\nimport { cubeApi } from '../services/cubeApi';\nimport { CubeFilter, MetricCardData } from '../types/cube';\nimport MetricsCard from './MetricsCard';\n\ninterface KPICardsProps {\n  filters?: CubeFilter[];\n}\n\nconst KPICards: React.FC<KPICardsProps> = ({ filters = [] }) => {\n  const [data, setData] = useState<MetricCardData[]>([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState<string | null>(null);\n\n  useEffect(() => {\n    fetchKPIs();\n  }, [filters]);\n\n  const fetchKPIs = async () => {\n    try {\n      setLoading(true);\n      const response = await cubeApi.query({\n        measures: [\n          'customer_behavior.count',\n          'customer_behavior.total_revenue',\n          'customer_behavior.average_order_value'\n        ],\n        timeDimensions: [{\n          dimension: 'customer_behavior.order_date',\n          dateRange: 'last 12 months'\n        }],\n        filters\n      });\n\n      // Extract data from the single result row\n      // Cube automatically rolls up the data when no granularity is specified\n      const resultData = response.data[0] || {};\n      \n      setData([\n        {\n          title: 'Order Count (LTM)',\n          value: parseInt(String(resultData['customer_behavior.count'] || '0')),\n          format: 'number',\n        },\n        {\n          title: 'Revenue (LTM)',\n          value: parseFloat(String(resultData['customer_behavior.total_revenue'] || '0')),\n          format: 'currency',\n        },\n        {\n          title: 'Avg Order Value (LTM)',\n          value: parseFloat(String(resultData['customer_behavior.average_order_value'] || '0')),\n          format: 'currency',\n        },\n      ]);\n    } catch (err) {\n      setError('Failed to load KPIs');\n      console.error('Error fetching KPIs:', err);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  if (error) {\n    return (\n      <Box sx={{ p: 3, textAlign: 'center' }}>\n        <Typography color=\"error\">{error}</Typography>\n      </Box>\n    );\n  }\n\n  // Show loading state\n  if (loading) {\n    return (\n      <Grid container spacing={3}>\n        {[1, 2, 3].map((index) => (\n          <Grid item xs={12} sm={4} md={4} key={index}>\n            <MetricsCard data={{ title: '', value: 0, isLoading: true }} />\n          </Grid>\n        ))}\n      </Grid>\n    );\n  }\n\n  return (\n    <Grid container spacing={3}>\n      {data.map((metric, index) => (\n        <Grid item xs={12} sm={4} md={4} key={index}>\n          <MetricsCard data={metric} />\n        </Grid>\n      ))}\n    </Grid>\n  );\n};\n\nexport default KPICards;\n"})}),"\n",(0,a.jsx)(n.h3,{id:"step-3-add-error-boundaries-and-better-error-handling",children:"Step 3: Add Error Boundaries and Better Error Handling"}),"\n",(0,a.jsx)(n.p,{children:"Create an error boundary component:"}),"\n",(0,a.jsxs)(n.p,{children:["Create ",(0,a.jsx)(n.code,{children:"src/components/ErrorBoundary.tsx"}),":"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-typescript",metastring:'title="src/components/ErrorBoundary.tsx"',children:"import React from 'react';\nimport { Alert, Container, Typography, Button, Box } from '@mui/material';\nimport { RefreshOutlined } from '@mui/icons-material';\n\ninterface Props {\n  children: React.ReactNode;\n}\n\ninterface State {\n  hasError: boolean;\n  error?: Error;\n}\n\nclass ErrorBoundary extends React.Component<Props, State> {\n  constructor(props: Props) {\n    super(props);\n    this.state = { hasError: false };\n  }\n\n  static getDerivedStateFromError(error: Error): State {\n    return { hasError: true, error };\n  }\n\n  componentDidCatch(error: Error, errorInfo: React.ErrorInfo) {\n    console.error('Dashboard Error Boundary caught an error:', error, errorInfo);\n  }\n\n  render() {\n    if (this.state.hasError) {\n      return (\n        <Container maxWidth=\"sm\" sx={{ mt: 8 }}>\n          <Alert severity=\"error\" sx={{ mb: 2 }}>\n            <Typography variant=\"h6\" gutterBottom>\n              Something went wrong\n            </Typography>\n            <Typography variant=\"body2\" gutterBottom>\n              {this.state.error?.message || 'An unexpected error occurred'}\n            </Typography>\n            <Box sx={{ mt: 2 }}>\n              <Button\n                variant=\"outlined\"\n                startIcon={<RefreshOutlined />}\n                onClick={() => window.location.reload()}\n              >\n                Reload Page\n              </Button>\n            </Box>\n          </Alert>\n        </Container>\n      );\n    }\n\n    return this.props.children;\n  }\n}\n\nexport default ErrorBoundary;\n"})}),"\n",(0,a.jsx)(n.h3,{id:"step-4-final-apptsx-polish",children:"Step 4: Final App.tsx Polish"}),"\n",(0,a.jsx)(n.p,{children:"Add the error boundary and final polish to the app:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-typescript",metastring:'title="src/App.tsx" {15,71-73}',children:'import React from \'react\';\nimport { ThemeProvider, createTheme } from \'@mui/material/styles\';\nimport CssBaseline from \'@mui/material/CssBaseline\';\nimport { \n  Box,\n  Container,\n  IconButton,\n  Link\n} from \'@mui/material\';\nimport { GitHub, Description } from \'@mui/icons-material\';\nimport { AuthProvider, useAuth } from \'./contexts/AuthContext\';\nimport Dashboard from \'./components/Dashboard\';\nimport LoginForm from \'./components/LoginForm\';\nimport Header from \'./components/Header\';\nimport ErrorBoundary from \'./components/ErrorBoundary\';\n\n// Create Material-UI theme\nconst theme = createTheme({\n  palette: {\n    mode: \'light\',\n    primary: {\n      main: \'#1976d2\',\n    },\n    secondary: {\n      main: \'#dc004e\',\n    },\n    background: {\n      default: \'#f5f5f5\',\n    },\n  },\n  typography: {\n    h4: {\n      fontWeight: 600,\n    },\n    h6: {\n      fontWeight: 500,\n    },\n  },\n  components: {\n    MuiCard: {\n      styleOverrides: {\n        root: {\n          boxShadow: \'0 2px 8px rgba(0,0,0,0.1)\',\n          borderRadius: 12,\n        },\n      },\n    },\n    MuiButton: {\n      styleOverrides: {\n        root: {\n          borderRadius: 8,\n        },\n      },\n    },\n  },\n});\n\n// Main app component that handles authentication state\nconst AppContent: React.FC = () => {\n  const { isAuthenticated, login } = useAuth();\n\n  if (!isAuthenticated) {\n    return <LoginForm onLogin={login} />;\n  }\n\n  return (\n    <Box sx={{ flexGrow: 1 }}>\n      <Header />\n\n      <main>\n        <ErrorBoundary>\n          <Dashboard />\n        </ErrorBoundary>\n      </main>\n\n      <Box \n        component="footer" \n        sx={{ \n          bgcolor: \'background.paper\', \n          py: 3, \n          mt: 6,\n          borderTop: 1,\n          borderColor: \'divider\'\n        }}\n      >\n        <Container maxWidth="lg">\n          <Box sx={{ display: \'flex\', alignItems: \'center\', justifyContent: \'center\', gap: 1, mb: 1 }}>\n            <IconButton \n              color="primary" \n              href="https://cube.dev/docs" \n              target="_blank"\n              title="Cube Documentation"\n              size="small"\n            >\n              <Description />\n            </IconButton>\n            <IconButton \n              color="primary" \n              href="https://github.com/cube-js/cube" \n              target="_blank"\n              title="Cube on GitHub"\n              size="small"\n            >\n              <GitHub />\n            </IconButton>\n          </Box>\n          <Box sx={{ textAlign: \'center\' }}>\n            <Link href="https://cube.dev" target="_blank" color="primary" sx={{ mr: 1 }}>\n              Cube\n            </Link>\n            \u2022\n            <Link href="https://react.dev" target="_blank" color="primary" sx={{ mx: 1 }}>\n              React\n            </Link>\n            \u2022\n            <Link href="https://mui.com" target="_blank" color="primary" sx={{ mx: 1 }}>\n              Material-UI\n            </Link>\n            \u2022\n            <Link href="https://chartjs.org" target="_blank" color="primary" sx={{ ml: 1 }}>\n              Chart.js\n            </Link>\n          </Box>\n        </Container>\n      </Box>\n    </Box>\n  );\n};\n\nfunction App() {\n  return (\n    <ThemeProvider theme={theme}>\n      <CssBaseline />\n      <AuthProvider>\n        <AppContent />\n      </AuthProvider>\n    </ThemeProvider>\n  );\n}\n\nexport default App;\n'})}),"\n",(0,a.jsx)(n.h3,{id:"step-5-real-world-performance-exercise",children:"Step 5: Real-world Performance Exercise"}),"\n",(0,a.jsx)(n.p,{children:"Let's explore how Cube's pre-aggregations make a real difference in dashboard performance."}),"\n",(0,a.jsx)(n.h4,{id:"the-performance-challenge",children:"The Performance Challenge"}),"\n",(0,a.jsxs)(n.p,{children:["Your app is quick to load most of the time because the fields in our queries are pre-aggregated. However, there's one exception: ",(0,a.jsx)(n.strong,{children:"customer segment filtering"}),"."]}),"\n",(0,a.jsx)(n.p,{children:"When you filter by customer segment, the query misses the Cube cache and must query the source data directly, causing noticeable lag."}),"\n",(0,a.jsx)(n.h4,{id:"see-the-problem-in-action",children:"See the Problem in Action"}),"\n",(0,a.jsxs)(n.ol,{children:["\n",(0,a.jsxs)(n.li,{children:["\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.strong,{children:"Test without segment filter"}),":"]}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:"View the dashboard without any customer segment filter"}),"\n",(0,a.jsx)(n.li,{children:"Switch tabs and filter by regions - the interface responds quickly"}),"\n"]}),"\n"]}),"\n",(0,a.jsxs)(n.li,{children:["\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.strong,{children:"Test with segment filter"}),":"]}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:"Now filter by a customer segment"}),"\n",(0,a.jsx)(n.li,{children:"Notice how the interface drags and responses are slower"}),"\n"]}),"\n"]}),"\n",(0,a.jsxs)(n.li,{children:["\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.strong,{children:"Verify in Cube"}),":"]}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:["Go to the ",(0,a.jsx)(n.strong,{children:"Query History"})," page in Cube"]}),"\n",(0,a.jsx)(n.li,{children:"You'll see uncached queries when filtering by customer segment"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,a.jsx)(n.h4,{id:"fix-the-performance-issue",children:"Fix the Performance Issue"}),"\n",(0,a.jsx)(n.p,{children:"Let's add customer segment to our pre-aggregations:"}),"\n",(0,a.jsxs)(n.ol,{children:["\n",(0,a.jsxs)(n.li,{children:["\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.strong,{children:"Enter Dev Mode"})," in your Cube workspace"]}),"\n"]}),"\n",(0,a.jsxs)(n.li,{children:["\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.strong,{children:"Update line_items pre-aggregations"}),":"]}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:["Open the ",(0,a.jsx)(n.code,{children:"line_items.yml"})," file"]}),"\n",(0,a.jsxs)(n.li,{children:["Add ",(0,a.jsx)(n.code,{children:"- orders.customers.segment"})," to the dimensions array in both pre-aggregations:"]}),"\n"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-yaml",metastring:'title="model/cubes/line_items.yml" {12,28}',children:' pre_aggregations:\n   - name: sales_by_month\n     measures:\n       - total_sales_amount\n       - total_quantity\n       - count\n     dimensions:\n       - orders.customers.customer_nations.customer_regions.name\n       - orders.customers.customer_nations.customer_regions.region_key\n       - orders.customers.name\n       - orders.customers.customer_key\n       - orders.customers.segment\n     time_dimension: ship_date\n     granularity: month\n     refresh_key:\n       every: "1 day"\n\n   - name: executive_kpis\n     measures:\n       - total_sales_amount\n       - total_discount\n     dimensions:\n       - orders.customers.customer_nations.customer_regions.name\n       - orders.customers.customer_nations.customer_regions.region_key\n       - orders.customers.customer_key\n       - parts.brand\n       - orders.priority\n       - orders.customers.segment\n     time_dimension: ship_date\n     granularity: week\n     refresh_key:\n       every: "4 hour"\n'})}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:"Save your changes, Commit, and Merge back to main"}),"\n"]}),"\n"]}),"\n",(0,a.jsxs)(n.li,{children:["\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.strong,{children:"Rebuild the pre-aggregations"}),":"]}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:["\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:["Once your deployment finishes updating (about 1 minute), go to the ",(0,a.jsx)(n.strong,{children:"Pre-Aggregations"})," page"]}),"\n"]}),"\n"]}),"\n",(0,a.jsxs)(n.li,{children:["Click on each of the ",(0,a.jsx)(n.code,{children:"line_items"})," pre-aggregations"]}),"\n",(0,a.jsxs)(n.li,{children:["Click ",(0,a.jsx)(n.strong,{children:'"Build All"'})," on the pre-aggregation detail page"]}),"\n"]}),"\n"]}),"\n",(0,a.jsxs)(n.li,{children:["\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.strong,{children:"Test the improvement"}),":"]}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:"Return to your React dashboard"}),"\n",(0,a.jsx)(n.li,{children:"Filter by customer segment - the first round of queries against a new pre-aggregate may be a bit slow as they are read for the first time, but repeated use should be much faster!"}),"\n",(0,a.jsx)(n.li,{children:"Check Query History - no more uncached queries when filtering by segment"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,a.jsx)(n.h4,{id:"what-we-learned",children:"What We Learned"}),"\n",(0,a.jsx)(n.p,{children:"This exercise demonstrates:"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:"How Cube's pre-aggregations dramatically improve query performance"}),"\n",(0,a.jsx)(n.li,{children:"The importance of including commonly-filtered dimensions in pre-aggregations"}),"\n",(0,a.jsx)(n.li,{children:"How to identify and fix performance bottlenecks using Query History"}),"\n",(0,a.jsx)(n.li,{children:"Real-world performance optimization in action"}),"\n"]}),"\n",(0,a.jsx)(n.p,{children:"By strategically adding dimensions to pre-aggregations, we ensure our dashboard remains fast and responsive regardless of user interactions."}),"\n",(0,a.jsx)(n.h2,{id:"recap-",children:"Recap! \ud83c\udf89"}),"\n",(0,a.jsx)(n.p,{children:"You've built a complete, production-ready analytics dashboard that demonstrates:"}),"\n",(0,a.jsx)(n.h3,{id:"react-development-skills",children:(0,a.jsx)(n.strong,{children:"React Development Skills"})}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Component Architecture"}),": Modular, reusable components"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"State Management"}),": React hooks and Context API"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"TypeScript Integration"}),": Type-safe development"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Material-UI Mastery"}),": Professional, responsive design"]}),"\n"]}),"\n",(0,a.jsx)(n.h3,{id:"cube-integration-excellence",children:(0,a.jsx)(n.strong,{children:"Cube Integration Excellence"})}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"REST API Integration"}),": Querying Cube's semantic layer"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Real-time Analytics"}),": Live data with interactive filtering"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Performance Optimization"}),": Leveraging pre-aggregations"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Multi-view Dashboards"}),": Three distinct analytical perspectives"]}),"\n"]}),"\n",(0,a.jsx)(n.h3,{id:"authentication--security",children:(0,a.jsx)(n.strong,{children:"Authentication & Security"})}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"JWT Implementation"}),": Server-side token generation"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Role-based Access"}),": Different users, different data access"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Secure Configuration"}),": Environment-based settings"]}),"\n"]}),"\n",(0,a.jsx)(n.h3,{id:"professional-features",children:(0,a.jsx)(n.strong,{children:"Professional Features"})}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Error Handling"}),": Graceful error boundaries and user feedback"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Loading States"}),": Professional skeletons and progress indicators"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Responsive Design"}),": Works on desktop and mobile"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Accessibility"}),": Proper ARIA labels and keyboard navigation"]}),"\n"]}),"\n",(0,a.jsx)(n.h3,{id:"final-project-structure",children:"Final Project Structure"}),"\n",(0,a.jsx)(n.p,{children:"Your completed project structure should look like this:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{children:"tpch-dashboard/\n\u251c\u2500\u2500 public/\n\u251c\u2500\u2500 src/\n\u2502   \u251c\u2500\u2500 components/\n\u2502   \u2502   \u251c\u2500\u2500 Dashboard.tsx\n\u2502   \u2502   \u251c\u2500\u2500 Header.tsx\n\u2502   \u2502   \u251c\u2500\u2500 LoginForm.tsx\n\u2502   \u2502   \u251c\u2500\u2500 KPICards.tsx\n\u2502   \u2502   \u251c\u2500\u2500 MetricsCard.tsx\n\u2502   \u2502   \u251c\u2500\u2500 FilterBar.tsx\n\u2502   \u2502   \u251c\u2500\u2500 SalesChart.tsx\n\u2502   \u2502   \u251c\u2500\u2500 RegionChart.tsx\n\u2502   \u2502   \u2514\u2500\u2500 ErrorBoundary.tsx\n\u2502   \u251c\u2500\u2500 contexts/\n\u2502   \u2502   \u2514\u2500\u2500 AuthContext.tsx\n\u2502   \u251c\u2500\u2500 services/\n\u2502   \u2502   \u2514\u2500\u2500 cubeApi.ts\n\u2502   \u251c\u2500\u2500 types/\n\u2502   \u2502   \u2514\u2500\u2500 cube.ts\n\u2502   \u251c\u2500\u2500 App.tsx\n\u2502   \u2514\u2500\u2500 index.tsx\n\u251c\u2500\u2500 server.js\n\u251c\u2500\u2500 .env\n\u251c\u2500\u2500 package.json\n\u2514\u2500\u2500 tsconfig.json\n"})}),"\n",(0,a.jsxs)(n.admonition,{type:"tip",children:[(0,a.jsxs)(n.p,{children:["As you go on to build your own analytics apps, you may find the ",(0,a.jsx)(n.strong,{children:"Chart Prototyping tool"})," quite useful.  It provides an interface to generate an app to display the exact chart in the playground with a few more options."]}),(0,a.jsxs)(n.p,{children:["Simply click the ",(0,a.jsx)(n.strong,{children:"Code"})," button in the chart section of the ",(0,a.jsx)(n.strong,{children:"Playground"})," and choose your options.  The ",(0,a.jsx)(n.strong,{children:"Code"})," and ",(0,a.jsx)(n.strong,{children:"Preview"})," tabs update automatically and can dramatically accelerate your app building experience!\n",(0,a.jsx)(n.img,{alt:"Playground Code button",src:t(8214).A+"",width:"3115",height:"1724"})]}),(0,a.jsx)(n.p,{children:(0,a.jsx)(n.img,{alt:"Chart prototyping",src:t(5900).A+"",width:"3008",height:"1632"})})]}),"\n",(0,a.jsx)(n.h2,{id:"next-steps",children:"Next Steps"}),"\n",(0,a.jsx)(n.p,{children:"Your dashboard is now ready for:"}),"\n",(0,a.jsxs)(n.ol,{children:["\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Production Deployment"})," - Deploy to Vercel, Netlify, or AWS"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Enhanced Visualizations"})," - Add maps, funnels, or custom charts"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Export Capabilities"})," - PDF reports, CSV downloads"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Advanced Filtering"})," - Date pickers, search functionality"]}),"\n"]}),"\n",(0,a.jsx)(n.p,{children:"You've successfully created a modern analytics application that showcases the power of combining React with Cube's semantic layer for enterprise-grade business intelligence!"}),"\n",(0,a.jsx)(n.hr,{}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.strong,{children:"Next"}),": ",(0,a.jsx)(n.a,{href:"/docs/d3-analytics",children:"D3 Analytics \u2192"})," - Your Agentic Data Team"]})]})}function h(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(p,{...e})}):p(e)}},1470:(e,n,t)=>{t.d(n,{A:()=>j});var r=t(6540),a=t(4164),s=t(3104),o=t(6347),i=t(205),l=t(7485),d=t(1682),c=t(679);function u(e){return r.Children.toArray(e).filter(e=>"\n"!==e).map(e=>{if(!e||(0,r.isValidElement)(e)&&function(e){const{props:n}=e;return!!n&&"object"==typeof n&&"value"in n}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)})?.filter(Boolean)??[]}function p(e){const{values:n,children:t}=e;return(0,r.useMemo)(()=>{const e=n??function(e){return u(e).map(({props:{value:e,label:n,attributes:t,default:r}})=>({value:e,label:n,attributes:t,default:r}))}(t);return function(e){const n=(0,d.XI)(e,(e,n)=>e.value===n.value);if(n.length>0)throw new Error(`Docusaurus error: Duplicate values "${n.map(e=>e.value).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e},[n,t])}function h({value:e,tabValues:n}){return n.some(n=>n.value===e)}function m({queryString:e=!1,groupId:n}){const t=(0,o.W6)(),a=function({queryString:e=!1,groupId:n}){if("string"==typeof e)return e;if(!1===e)return null;if(!0===e&&!n)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return n??null}({queryString:e,groupId:n});return[(0,l.aZ)(a),(0,r.useCallback)(e=>{if(!a)return;const n=new URLSearchParams(t.location.search);n.set(a,e),t.replace({...t.location,search:n.toString()})},[a,t])]}function g(e){const{defaultValue:n,queryString:t=!1,groupId:a}=e,s=p(e),[o,l]=(0,r.useState)(()=>function({defaultValue:e,tabValues:n}){if(0===n.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(e){if(!h({value:e,tabValues:n}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${e}" but none of its children has the corresponding value. Available values are: ${n.map(e=>e.value).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return e}const t=n.find(e=>e.default)??n[0];if(!t)throw new Error("Unexpected error: 0 tabValues");return t.value}({defaultValue:n,tabValues:s})),[d,u]=m({queryString:t,groupId:a}),[g,b]=function({groupId:e}){const n=function(e){return e?`docusaurus.tab.${e}`:null}(e),[t,a]=(0,c.Dv)(n);return[t,(0,r.useCallback)(e=>{n&&a.set(e)},[n,a])]}({groupId:a}),x=(()=>{const e=d??g;return h({value:e,tabValues:s})?e:null})();(0,i.A)(()=>{x&&l(x)},[x]);return{selectedValue:o,selectValue:(0,r.useCallback)(e=>{if(!h({value:e,tabValues:s}))throw new Error(`Can't select invalid tab value=${e}`);l(e),u(e),b(e)},[u,b,s]),tabValues:s}}var b=t(2303);const x={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};var f=t(4848);function y({className:e,block:n,selectedValue:t,selectValue:r,tabValues:o}){const i=[],{blockElementScrollPositionUntilNextRender:l}=(0,s.a_)(),d=e=>{const n=e.currentTarget,a=i.indexOf(n),s=o[a].value;s!==t&&(l(n),r(s))},c=e=>{let n=null;switch(e.key){case"Enter":d(e);break;case"ArrowRight":{const t=i.indexOf(e.currentTarget)+1;n=i[t]??i[0];break}case"ArrowLeft":{const t=i.indexOf(e.currentTarget)-1;n=i[t]??i[i.length-1];break}}n?.focus()};return(0,f.jsx)("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,a.A)("tabs",{"tabs--block":n},e),children:o.map(({value:e,label:n,attributes:r})=>(0,f.jsx)("li",{role:"tab",tabIndex:t===e?0:-1,"aria-selected":t===e,ref:e=>{i.push(e)},onKeyDown:c,onClick:d,...r,className:(0,a.A)("tabs__item",x.tabItem,r?.className,{"tabs__item--active":t===e}),children:n??e},e))})}function C({lazy:e,children:n,selectedValue:t}){const s=(Array.isArray(n)?n:[n]).filter(Boolean);if(e){const e=s.find(e=>e.props.value===t);return e?(0,r.cloneElement)(e,{className:(0,a.A)("margin-top--md",e.props.className)}):null}return(0,f.jsx)("div",{className:"margin-top--md",children:s.map((e,n)=>(0,r.cloneElement)(e,{key:n,hidden:e.props.value!==t}))})}function v(e){const n=g(e);return(0,f.jsxs)("div",{className:(0,a.A)("tabs-container",x.tabList),children:[(0,f.jsx)(y,{...n,...e}),(0,f.jsx)(C,{...n,...e})]})}function j(e){const n=(0,b.A)();return(0,f.jsx)(v,{...e,children:u(e.children)},String(n))}},1692:(e,n,t)=>{t.d(n,{A:()=>r});const r=t.p+"assets/images/delete-session-e1c49e9fbf97145384f5275a279d5996.png"},5690:(e,n,t)=>{t.d(n,{A:()=>r});const r=t.p+"assets/images/cube-api-endpoint-c412f10da5e901b0ff8b0ce6bdf7cc34.png"},5900:(e,n,t)=>{t.d(n,{A:()=>r});const r=t.p+"assets/images/chart-prototyping-30729ecbe3d6791752b22b4aa1b6739b.png"},6089:(e,n,t)=>{t.d(n,{A:()=>r});const r=t.p+"assets/images/cube-api-secret-13eab2e531afed89184db30add08443e.png"},7363:(e,n,t)=>{t.d(n,{A:()=>r});const r=t.p+"assets/images/finished-dashboard-54caaf40090d0b070132962e63961a69.png"},8214:(e,n,t)=>{t.d(n,{A:()=>r});const r=t.p+"assets/images/playground-code-button-a24dcaa93e734eea9e65c7eced572ebf.png"},9365:(e,n,t)=>{t.d(n,{A:()=>o});t(6540);var r=t(4164);const a={tabItem:"tabItem_Ymn6"};var s=t(4848);function o({children:e,hidden:n,className:t}){return(0,s.jsx)("div",{role:"tabpanel",className:(0,r.A)(a.tabItem,t),hidden:n,children:e})}}}]);